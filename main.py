import asyncio
import logging
import os
import io
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, BufferedInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
# OpenAI –∏–º–ø–æ—Ä—Ç —É–±—Ä–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ AIService
from ai_service import AIService
from document_processor import DocumentProcessor
from legal_knowledge import LegalKnowledge
from tts_service import TTSService
from admin_panel import AdminPanel

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from config import Config

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
Config.validate()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=Config.BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
ai_service = AIService(Config.OPENAI_API_KEY)
doc_processor = DocumentProcessor()
tts_service = TTSService(Config.OPENAI_API_KEY)
admin_panel = AdminPanel()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class BotStates(StatesGroup):
    waiting_for_case_description = State()
    waiting_for_document_upload = State()
    waiting_for_check_document = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=Config.MENU_BUTTONS["search_practice"], callback_data="find_practice")],
        [InlineKeyboardButton(text=Config.MENU_BUTTONS["prepare_appeal"], callback_data="prepare_complaint")],
        [InlineKeyboardButton(text=Config.MENU_BUTTONS["check_documents"], callback_data="check_document")],
        [InlineKeyboardButton(text=Config.MENU_BUTTONS["share_bot"], callback_data="share_bot")]
    ])
    return keyboard

def get_back_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    return keyboard

def get_share_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì• –°–ö–ê–ß–ê–¢–¨ –ü–†–ò–õ–û–ñ–ï–ù–ò–ï", url="https://onelink.to/rsv8c3")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ë–ï–ó –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
async def send_promo_message_with_voice(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –Æ—Ä–∏—Å—Ç–∞' —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º"""
    try:
        promo_text = """üèõÔ∏è –£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–∏–º –±–æ—Ç–æ–º.

üì± –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —é—Ä–∏—Å—Ç–æ–≤ –∏ –∞–¥–≤–æ–∫–∞—Ç–æ–≤ ¬´–ö–∞–ª–µ–Ω–¥–∞—Ä—å –Æ—Ä–∏—Å—Ç–∞¬ª

–ö–æ–Ω—Ç—Ä–æ–ª—å –≤—Å–µ—Ö –¥–µ–ª –∏ —Å—Ä–æ–∫–æ–≤ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ:
‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å—Ä–æ–∫–∞—Ö
‚úÖ –£—á—ë—Ç –¥–µ–ª –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤  
‚úÖ –î–æ—Å—Ç—É–ø –∫ —Å—É–¥–µ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
‚úÖ –£–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:"""
        
        promo_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì± –°–ö–ê–ß–ê–¢–¨ –ü–†–ò–õ–û–ñ–ï–ù–ò–ï", url="https://onelink.to/rsv8c3")]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            promo_text,
            reply_markup=promo_keyboard,
            parse_mode='HTML'
        )
        logger.info("‚úÖ –†–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async def send_response_with_voice(message: types.Message, text_response: str, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∏ –µ–≥–æ –≥–æ–ª–æ—Å–æ–≤—É—é –≤–µ—Ä—Å–∏—é"""
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–æ—Å
        admin_panel.log_user_activity(
            user_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
        admin_panel.log_user_request(
            user_id=message.from_user.id,
            request_type="bot_response",
            request_text=text_response[:500] + "..." if len(text_response) > 500 else text_response,
            response_text="Response sent with voice",
            processing_time=0.0
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        if len(text_response) > 4000:
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–º
            filename = f"response_{message.from_user.id}.txt"
            with open(filename, "w", encoding="utf-8") as f:
                f.write(text_response)
            
            await message.answer_document(
                FSInputFile(filename),
                caption="üìã –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤!",
                reply_markup=reply_markup or get_back_keyboard()
            )
            
            try:
                os.remove(filename)
            except Exception:
                pass
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await message.answer(
                text_response,
                reply_markup=reply_markup or get_back_keyboard(),
                parse_mode='HTML'
            )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info("üé§ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥–æ–ª–æ—Å–æ–≤—É—é –≤–µ—Ä—Å–∏—é –æ—Ç–≤–µ—Ç–∞...")
        voice_data = await tts_service.text_to_speech(text_response)
        
        if voice_data:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ BufferedInputFile
            voice_file = BufferedInputFile(
                voice_data, 
                filename="response.mp3"  # Telegram –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç MP3
            )
            
            await message.answer_voice(
                voice=voice_file,
                caption="""üé§ –ì–æ–ª–æ—Å–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç–≤–µ—Ç–∞

‚ùì –ù–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç–∞? –í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã?
üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è @ZachitaPrava02"""
            )
            logger.info("‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await send_promo_message_with_voice(message)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å –≥–æ–ª–æ—Å–æ–º: {e}")
        
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ
        # (–æ–Ω —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã—à–µ)
        logger.warning("‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    welcome_text = Config.WELCOME_TEXT
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–µ–∑ –ø—Ä–æ–º–æ
    await message.answer(welcome_text, reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ Start (—É–¥–∞–ª–µ–Ω, —Ç–µ–ø–µ—Ä—å –∫–æ–º–∞–Ω–¥–∞ /start —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(F.data == "main_menu")
async def process_main_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.message.edit_text(
        "üèõÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏
@dp.callback_query(F.data == "find_practice")
async def process_find_practice(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(BotStates.waiting_for_case_description)
    await callback_query.message.edit_text(
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–æ. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "\"–ú–µ–Ω—è —É–≤–æ–ª–∏–ª–∏ –±–µ–∑ –ø—Ä–∏–∫–∞–∑–∞, —Ö–æ—á—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç–µ\"\n\n"
        "–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤—ã –æ–ø–∏—à–µ—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞.",
        reply_markup=get_back_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–∏—Å–∞–Ω–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏
@dp.message(BotStates.waiting_for_case_description)
async def process_case_description(message: types.Message, state: FSMContext):
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å
    processing_message = await message.answer(
        Config.TEXTS["processing"]
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    admin_panel.log_user_activity(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç
        if message.voice:
            # –≠—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ AI
            logger.info(f"üé§ –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_for_case_description –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            try:
                await processing_message.edit_text("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∏—Ç—É–∞—Ü–∏—é...")
            except Exception:
                pass
            
            # –ü–æ–ª—É—á–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª
            voice = message.voice
            file_info = await bot.get_file(voice.file_id)
            voice_file_io = await bot.download_file(file_info.file_path)
            voice_file_bytes = voice_file_io.read()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
            file_format = "ogg"
            if file_info.file_path:
                file_extension = file_info.file_path.split('.')[-1].lower()
                if file_extension in ['ogg', 'mp3', 'wav', 'm4a', 'mp4']:
                    file_format = file_extension
            
            # –°–Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            transcribed_text = await ai_service.transcribe_voice_message(voice_file_bytes, file_format)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
            if transcribed_text.startswith("‚ùå") or not transcribed_text:
                logger.error("‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                try:
                    await processing_message.delete()
                except Exception:
                    pass
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.",
                    reply_markup=get_back_keyboard()
                )
                return
                
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –≥–æ–ª–æ—Å–æ–≤–æ–π
            admin_panel.log_user_request(
                user_id=message.from_user.id,
                request_type="voice_legal_practice_search",
                request_text=transcribed_text,
                response_text="",
                processing_time=0.0
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            analysis = await ai_service.find_legal_practice(transcribed_text)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ –±—ã–ª–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            voice_header = f"""üé§ <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b> "{transcribed_text}"

üìã <b>–ê–ù–ê–õ–ò–ó –í–ê–®–ï–ô –°–ò–¢–£–ê–¶–ò–ò:</b>

"""
            analysis = voice_header + analysis
            
        elif message.text:
            # –≠—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
            logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_for_case_description –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π
            admin_panel.log_user_request(
                user_id=message.from_user.id,
                request_type="legal_practice_search", 
                request_text=message.text,
                response_text="",
                processing_time=0.0
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò
            analysis = await ai_service.find_legal_practice(message.text)
        
        else:
            # –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            logger.error(f"‚ùå –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            try:
                await processing_message.delete()
            except Exception:
                pass
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                reply_markup=get_back_keyboard()
            )
            return
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        try:
            await processing_message.delete()
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ analysis —Å–ø–∏—Å–∫–æ–º —á–∞—Å—Ç–µ–π
        if isinstance(analysis, list):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
            for i, part in enumerate(analysis):
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–ª–∞–º—É —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
                if i == len(analysis) - 1:
                    part_with_ad = f"""{part}

---

‚ùì <b>–ù–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç–∞? –í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã?</b>
üÜì <b>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</b> @ZachitaPrava02"""
                    await send_response_with_voice(message, part_with_ad)
                else:
                    # –ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —á–∞—Å—Ç–µ–π
                    await message.answer(part, parse_mode='HTML', reply_markup=get_back_keyboard())
                    
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                await asyncio.sleep(1)
        else:
            # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            if len(analysis) > 4000:
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–º
                with open(f"analysis_{message.from_user.id}.txt", "w", encoding="utf-8") as f:
                    f.write(analysis)
                
                await message.answer_document(
                    FSInputFile(f"analysis_{message.from_user.id}.txt"),
                    caption="üìã –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤! –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.",
                    reply_markup=get_back_keyboard()
                )
                
                os.remove(f"analysis_{message.from_user.id}.txt")
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                await send_response_with_voice(message, analysis)
        
    except Exception as e:
        try:
            await processing_message.delete()
        except Exception:
            pass
        await message.answer(
            Config.TEXTS["error"],
            reply_markup=get_back_keyboard(),
            parse_mode='HTML'
        )
        logger.error(f"Error in case analysis: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∂–∞–ª–æ–±—ã
@dp.callback_query(F.data == "prepare_complaint")
async def process_prepare_complaint(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(BotStates.waiting_for_document_upload)
    await callback_query.message.edit_text(
        "üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF, DOCX –∏–ª–∏ TXT.\n\n"
        "–ë–æ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç –ø—Ä–æ–µ–∫—Ç –∞–ø–µ–ª–ª—è—Ü–∏–æ–Ω–Ω–æ–π –∏–ª–∏ –∫–∞—Å—Å–∞—Ü–∏–æ–Ω–Ω–æ–π –∂–∞–ª–æ–±—ã.",
        reply_markup=get_back_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∂–∞–ª–æ–±—ã
@dp.message(BotStates.waiting_for_document_upload)
async def process_document_for_complaint(message: types.Message, state: FSMContext):
    if not message.document:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF, DOCX –∏–ª–∏ TXT.",
            reply_markup=get_back_keyboard()
        )
        return
    
    await state.clear()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    if message.document.file_size > Config.MAX_FILE_SIZE:
        await message.answer(
            Config.TEXTS["file_too_large"],
            reply_markup=get_back_keyboard()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    file_extension = '.' + message.document.file_name.split('.')[-1].lower()
    if file_extension not in Config.ALLOWED_EXTENSIONS:
        await message.answer(
            Config.TEXTS["unsupported_format"],
            reply_markup=get_back_keyboard()
        )
        return
    
    processing_message = await message.answer(
        Config.TEXTS["processing"]
    )
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(message.document.file_id)
        file_path = f"{Config.UPLOAD_DIR}/temp_{message.document.file_id}{file_extension}"
        await bot.download_file(file.file_path, file_path)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
        document_text = doc_processor.extract_text(file_path)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(file_path)
        
        if not document_text:
            try:
                await processing_message.delete()
            except Exception:
                pass
            await message.answer(
                Config.TEXTS["error"],
                reply_markup=get_back_keyboard()
            )
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∂–∞–ª–æ–±—É —Å –ø–æ–º–æ—â—å—é –ò–ò
        complaint = await ai_service.generate_complaint(document_text)
        
        try:
            await processing_message.delete()
        except Exception:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if len(complaint) > 4000:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–º
            with open(f"complaint_{message.from_user.id}.txt", "w", encoding="utf-8") as f:
                f.write(complaint)
            
            await message.answer_document(
                FSInputFile(f"complaint_{message.from_user.id}.txt"),
                caption="üìù –ü—Ä–æ–µ–∫—Ç –∂–∞–ª–æ–±—ã –≥–æ—Ç–æ–≤! –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
                reply_markup=get_back_keyboard()
            )
            
            os.remove(f"complaint_{message.from_user.id}.txt")
        else:
            await send_response_with_voice(message, complaint)
            
    except Exception as e:
        try:
            await processing_message.delete()
        except Exception:
            pass
        await message.answer(
            Config.TEXTS["error"],
            reply_markup=get_back_keyboard()
        )
        logger.error(f"Error in document processing: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
@dp.callback_query(F.data == "check_document")
async def process_check_document(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(BotStates.waiting_for_check_document)
    await callback_query.message.edit_text(
        "üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF, DOCX –∏–ª–∏ TXT.\n\n"
        "–ë–æ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫, –Ω–µ–¥–æ—á–µ—Ç–æ–≤ –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤.",
        reply_markup=get_back_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
@dp.message(BotStates.waiting_for_check_document)
async def process_document_for_check(message: types.Message, state: FSMContext):
    if not message.document:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF, DOCX –∏–ª–∏ TXT.",
            reply_markup=get_back_keyboard()
        )
        return
    
    await state.clear()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    if message.document.file_size > Config.MAX_FILE_SIZE:
        await message.answer(
            Config.TEXTS["file_too_large"],
            reply_markup=get_back_keyboard()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    file_extension = '.' + message.document.file_name.split('.')[-1].lower()
    if file_extension not in Config.ALLOWED_EXTENSIONS:
        await message.answer(
            Config.TEXTS["unsupported_format"],
            reply_markup=get_back_keyboard()
        )
        return
    
    processing_message = await message.answer(
        Config.TEXTS["analyzing"]
    )
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(message.document.file_id)
        file_path = f"{Config.UPLOAD_DIR}/temp_{message.document.file_id}{file_extension}"
        await bot.download_file(file.file_path, file_path)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
        document_text = doc_processor.extract_text(file_path)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(file_path)
        
        if not document_text:
            try:
                await processing_message.delete()
            except Exception:
                pass
            await message.answer(
                Config.TEXTS["error"],
                reply_markup=get_back_keyboard()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò
        analysis = await ai_service.check_document(document_text)
        
        try:
            await processing_message.delete()
        except Exception:
            pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
        if len(analysis) > 4000:
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–º
            with open(f"document_check_{message.from_user.id}.txt", "w", encoding="utf-8") as f:
                f.write(analysis)
            
            await message.answer_document(
                FSInputFile(f"document_check_{message.from_user.id}.txt"),
                caption="üìã –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≥–æ—Ç–æ–≤! –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É.",
                reply_markup=get_back_keyboard()
            )
            
            os.remove(f"document_check_{message.from_user.id}.txt")
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º  
            await send_response_with_voice(message, analysis)
        
    except Exception as e:
        try:
            await processing_message.delete()
        except Exception:
            pass
        await message.answer(
            Config.TEXTS["error"],
            reply_markup=get_back_keyboard(),
            parse_mode='HTML'
        )
        logger.error(f"Error in document check: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º"
@dp.callback_query(F.data == "share_bot")
async def process_share_bot(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        Config.TEXTS["share"],
        reply_markup=get_share_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è)
@dp.message(F.voice)
async def process_voice_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º —Ä–µ—á–∏ –∏ –ø–æ–∏—Å–∫–æ–º –ø—Ä–∞–∫—Ç–∏–∫–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    current_state = await state.get_state()
    if current_state is not None:
        logger.info(f"üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}")
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –ø—É—Å—Ç—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_message = await message.answer(
        "üé§ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...</b>\n\n"
        "‚è≥ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å —á–µ—Ä–µ–∑ Whisper-1...\n"
        "üîç –ó–∞—Ç–µ–º –Ω–∞–π–¥—É –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É...",
        parse_mode='HTML'
    )
    
    try:
        logger.info(f"üé§ –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–æ–º —Ñ–∞–π–ª–µ
        voice = message.voice
        logger.info(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {voice.duration}—Å, —Ä–∞–∑–º–µ—Ä {voice.file_size} –±–∞–π—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)
        if voice.duration > 300:  # 5 –º–∏–Ω—É—Ç
            await processing_message.edit_text(
                "‚ùå <b>–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ</b>\n\n"
                "‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5 –º–∏–Ω—É—Ç\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.",
                reply_markup=get_main_keyboard(),
                parse_mode='HTML'
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await processing_message.edit_text(
            "üé§ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...</b>\n\n"
            "üì° –ó–∞–≥—Ä—É–∂–∞—é –∞—É–¥–∏–æ —Ñ–∞–π–ª...",
            parse_mode='HTML'
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram
        file_info = await bot.get_file(voice.file_id)
        voice_file_io = await bot.download_file(file_info.file_path)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–π—Ç—ã –∏–∑ BytesIO –æ–±—ä–µ–∫—Ç–∞
        voice_file_bytes = voice_file_io.read()
        voice_file_io.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        
        logger.info(f"‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–∞–∑–º–µ—Ä: {len(voice_file_bytes)} –±–∞–π—Ç")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await processing_message.edit_text(
            "üé§ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...</b>\n\n"
            "‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω\n"
            "üéØ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∏—Ç—É–∞—Ü–∏—é...",
            parse_mode='HTML'
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ (Telegram –æ–±—ã—á–Ω–æ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç .ogg)
        file_format = "ogg"
        if file_info.file_path:
            file_extension = file_info.file_path.split('.')[-1].lower()
            if file_extension in ['ogg', 'mp3', 'wav', 'm4a', 'mp4']:
                file_format = file_extension
        
        logger.info(f"üéµ –§–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞: {file_format}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ AI —Å–µ—Ä–≤–∏—Å
        analysis_result = await ai_service.process_voice_message(voice_file_bytes, file_format)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        try:
            await processing_message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
        if len(analysis_result) > 4000:
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–º
            filename = f"voice_analysis_{message.from_user.id}.txt"
            with open(filename, "w", encoding="utf-8") as f:
                f.write(analysis_result)
            
            await message.answer_document(
                FSInputFile(filename),
                caption="üé§ <b>–ê–Ω–∞–ª–∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≥–æ—Ç–æ–≤!</b>\n\n"
                       "üìã –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏.",
                reply_markup=get_back_keyboard(),
                parse_mode='HTML'
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(filename)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {filename}: {e}")
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            await send_response_with_voice(message, analysis_result)
        
        logger.info(f"‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            await processing_message.delete()
        except Exception:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_message = "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
        
        if "insufficient_quota" in str(e) or "429" in str(e):
            error_message += "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ OpenAI API\n"
            error_message += "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º"
        elif "audio" in str(e).lower() or "format" in str(e).lower():
            error_message += "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–º\n"
            error_message += "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑"
        else:
            error_message += "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞\n"
            error_message += "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ"
        
        await message.answer(
            error_message,
            reply_markup=get_main_keyboard(),
            parse_mode='HTML'
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not admin_panel.is_admin(message.from_user.id):
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_panel.log_system_event(
        event_type="admin_login", 
        event_data=f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.username or message.from_user.first_name} –≤–æ—à–µ–ª –≤ –ø–∞–Ω–µ–ª—å",
        user_id=message.from_user.id
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await get_admin_statistics()
    
    admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
        [InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_analytics")],
        [InlineKeyboardButton(text="üìù –ó–∞–ø—Ä–æ—Å—ã", callback_data="admin_requests")],
        [InlineKeyboardButton(text="üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_export")],
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await message.answer(
        f"""üõ†Ô∏è <b>–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —é—Ä–∏—Å—Ç"</b>

üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å: {stats['active_today']}
üìù –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {stats['requests_today']}
‚≠ê –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {stats['top_user']}

üéØ <b>–î–ï–ô–°–¢–í–ò–Ø:</b>
–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∏–∂–µ""",
        reply_markup=admin_keyboard,
        parse_mode='HTML'
    )

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
async def get_admin_statistics():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    try:
        import sqlite3
        from datetime import datetime, timedelta
        
        logger.info("üóÑÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        conn = sqlite3.connect(admin_panel.db_path, timeout=5.0)  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç
        cursor = conn.cursor()
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        logger.info("üë• –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0] or 0
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –¥–µ–Ω—å
        logger.info("üî• –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        yesterday = datetime.now() - timedelta(days=1)
        cursor.execute("SELECT COUNT(*) FROM users WHERE last_activity > ?", (yesterday.isoformat(),))
        active_today = cursor.fetchone()[0] or 0
        logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_today}")
        
        # –ó–∞–ø—Ä–æ—Å—ã —Å–µ–≥–æ–¥–Ω—è
        logger.info("üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è...")
        today = datetime.now().strftime('%Y-%m-%d')
        cursor.execute("SELECT COUNT(*) FROM user_requests WHERE DATE(timestamp) = ?", (today,))
        requests_today = cursor.fetchone()[0] or 0
        logger.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å–æ–≤: {requests_today}")
        
        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        logger.info("‚≠ê –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        cursor.execute("""
            SELECT first_name, username, total_requests 
            FROM users 
            WHERE total_requests IS NOT NULL AND total_requests > 0
            ORDER BY total_requests DESC 
            LIMIT 1
        """)
        top_user_data = cursor.fetchone()
        if top_user_data:
            first_name = top_user_data[0] or ""
            username = top_user_data[1] or ""
            total_requests = top_user_data[2] or 0
            name = first_name or username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            top_user = f"{name} ({total_requests} –∑–∞–ø—Ä–æ—Å–æ–≤)"
        else:
            top_user = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        logger.info(f"‚úÖ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {top_user}")
        
        conn.close()
        logger.info("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞")
        
        return {
            'total_users': total_users,
            'active_today': active_today, 
            'requests_today': requests_today,
            'top_user': top_user
        }
        
    except sqlite3.OperationalError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {
            'total_users': 0,
            'active_today': 0,
            'requests_today': 0,
            'top_user': "–ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        }
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {
            'total_users': 0,
            'active_today': 0,
            'requests_today': 0,
            'top_user': "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"
        }

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query(F.data.startswith("admin_"))
async def process_admin_actions(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not admin_panel.is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    action = callback_query.data.split("_")[1]
    
    if action == "users":
        await show_users_list(callback_query)
    elif action == "analytics":
        await show_analytics(callback_query)
    elif action == "requests":
        await show_requests_list(callback_query)
    elif action == "export":
        await show_export_options(callback_query)
    elif action == "back":
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ admin_back
        await admin_back(callback_query)
    else:
        logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {action}")
        await callback_query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)

async def show_users_list(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        import sqlite3
        conn = sqlite3.connect(admin_panel.db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT user_id, first_name, username, total_requests, last_activity
            FROM users 
            ORDER BY total_requests DESC 
            LIMIT 20
        """)
        users = cursor.fetchall()
        conn.close()
        
        if not users:
            await callback_query.message.edit_text(
                "üë• <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                parse_mode='HTML'
            )
            return
        
        users_text = "üë• <b>–¢–û–ü-20 –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:</b>\n\n"
        
        for i, (user_id, first_name, username, requests, last_activity) in enumerate(users, 1):
            name = first_name or username or f"ID{user_id}"
            requests_count = requests or 0
            activity_text = last_activity[:16] if last_activity else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            users_text += f"{i}. <b>{name}</b>\n"
            users_text += f"   üìù –ó–∞–ø—Ä–æ—Å–æ–≤: {requests_count}\n"
            users_text += f"   üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_text}\n\n"
        
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
        ])
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–æ–∫
        await callback_query.message.edit_text(
            users_text,
            reply_markup=back_keyboard,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

async def show_analytics(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
    try:
        import sqlite3
        from datetime import datetime, timedelta
        
        conn = sqlite3.connect(admin_panel.db_path)
        cursor = conn.cursor()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        week_ago = datetime.now() - timedelta(days=7)
        cursor.execute("SELECT COUNT(*) FROM user_requests WHERE timestamp > ?", (week_ago,))
        requests_week = cursor.fetchone()[0]
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤
        cursor.execute("""
            SELECT request_type, COUNT(*) as count 
            FROM user_requests 
            GROUP BY request_type 
            ORDER BY count DESC 
            LIMIT 5
        """)
        popular_types = cursor.fetchall()
        
        conn.close()
        
        analytics_text = f"""üìä <b>–ê–ù–ê–õ–ò–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´</b>

üìà <b>–ê–ö–¢–ò–í–ù–û–°–¢–¨:</b>
‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {requests_week}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {requests_week // 7}

üî• <b>–ü–û–ü–£–õ–Ø–†–ù–´–ï –¢–ò–ü–´ –ó–ê–ü–†–û–°–û–í:</b>
"""
        
        for i, (req_type, count) in enumerate(popular_types, 1):
            analytics_text += f"{i}. {req_type}: {count} —Ä–∞–∑\n"
        
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
        ])
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–æ–∫
        await callback_query.message.edit_text(
            analytics_text,
            reply_markup=back_keyboard,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", show_alert=True)

async def show_requests_list(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã"""
    try:
        import sqlite3
        conn = sqlite3.connect(admin_panel.db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT ur.timestamp, u.first_name, u.username, ur.request_type, ur.request_text
            FROM user_requests ur
            JOIN users u ON ur.user_id = u.user_id
            ORDER BY ur.timestamp DESC
            LIMIT 10
        """)
        requests = cursor.fetchall()
        conn.close()
        
        if not requests:
            await callback_query.message.edit_text(
                "üìù <b>–ó–ê–ü–†–û–°–´</b>\n\n–ó–∞–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                parse_mode='HTML'
            )
            return
        
        requests_text = "üìù <b>–ü–û–°–õ–ï–î–ù–ò–ï 10 –ó–ê–ü–†–û–°–û–í:</b>\n\n"
        
        for timestamp, first_name, username, req_type, req_text in requests:
            name = first_name or username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º req_text –Ω–∞ None –∏ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if req_text is None:
                short_text = "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞"
            elif len(req_text) > 50:
                short_text = req_text[:50] + "..."
            else:
                short_text = req_text
            requests_text += f"üïê {timestamp[:16]}\n"
            requests_text += f"üë§ <b>{name}</b>\n"
            requests_text += f"üìã –¢–∏–ø: {req_type or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}\n"
            requests_text += f"üí¨ {short_text}\n\n"
        
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
        ])
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–æ–∫
        await callback_query.message.edit_text(
            requests_text,
            reply_markup=back_keyboard,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤", show_alert=True)

async def show_export_options(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    export_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="export_users")],
        [InlineKeyboardButton(text="üìù –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data="export_requests")],
        [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
    ])
    
    await callback_query.message.edit_text(
        "üíæ <b>–≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–•</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:",
        reply_markup=export_keyboard,
        parse_mode='HTML'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
@dp.callback_query(F.data.startswith("export_"))
async def process_export(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    if not admin_panel.is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    export_type = callback_query.data.split("_")[1]
    
    try:
        await callback_query.answer("‚è≥ –°–æ–∑–¥–∞—é —ç–∫—Å–ø–æ—Ä—Ç...")
        
        if export_type == "users":
            await export_users_data(callback_query)
        elif export_type == "requests":
            await export_requests_data(callback_query)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

async def export_users_data(callback_query: types.CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV"""
    try:
        import sqlite3
        import csv
        from datetime import datetime
        
        conn = sqlite3.connect(admin_panel.db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT user_id, username, first_name, last_name, 
                   registration_date, last_activity, total_requests
            FROM users 
            ORDER BY total_requests DESC
        """)
        users = cursor.fetchall()
        conn.close()
        
        if not users:
            back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
            ])
            await callback_query.message.edit_text(
                "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞",
                reply_markup=back_keyboard,
                parse_mode='HTML'
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª
        filename = f"users_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        
        with open(filename, 'w', newline='', encoding='utf-8-sig') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(['ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'Username', '–ò–º—è', '–§–∞–º–∏–ª–∏—è', 
                           '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤'])
            
            for user in users:
                writer.writerow(user)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await callback_query.message.answer_document(
            FSInputFile(filename),
            caption=f"üìä <b>–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
                   f"üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(users)}\n"
                   f"üìÖ –°–æ–∑–¥–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            parse_mode='HTML'
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(filename)
        except Exception:
            pass
            
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
        ])
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —ç–∫—Å–ø–æ—Ä—Ç–∞
        await callback_query.message.edit_text(
            "‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!",
            reply_markup=back_keyboard,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)

async def export_requests_data(callback_query: types.CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ CSV"""
    try:
        import sqlite3
        import csv
        from datetime import datetime
        
        conn = sqlite3.connect(admin_panel.db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT ur.timestamp, u.first_name, u.username, ur.request_type, 
                   ur.request_text, ur.processing_time, ur.status
            FROM user_requests ur
            JOIN users u ON ur.user_id = u.user_id
            ORDER BY ur.timestamp DESC
            LIMIT 1000
        """)
        requests = cursor.fetchall()
        conn.close()
        
        if not requests:
            back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
            ])
            await callback_query.message.edit_text(
                "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞",
                reply_markup=back_keyboard,
                parse_mode='HTML'  
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª
        filename = f"requests_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        
        with open(filename, 'w', newline='', encoding='utf-8-sig') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'Username', 
                           '–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞', '–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞', '–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏', '–°—Ç–∞—Ç—É—Å'])
            
            for request in requests:
                writer.writerow(request)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await callback_query.message.answer_document(
            FSInputFile(filename),
            caption=f"üìä <b>–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø—Ä–æ—Å–æ–≤</b>\n\n"
                   f"üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(requests)}\n"
                   f"üìÖ –°–æ–∑–¥–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            parse_mode='HTML'
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(filename)
        except Exception:
            pass
            
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
        ])
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —ç–∫—Å–ø–æ—Ä—Ç–∞
        await callback_query.message.edit_text(
            "‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!",
            reply_markup=back_keyboard,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)

async def admin_back(callback_query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    try:
        logger.info("üîÑ –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å - –Ω–∞—á–∞–ª–æ")
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await callback_query.answer()
        
        logger.info("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            stats = await get_admin_statistics()
            logger.info("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            stats = {
                'total_users': 0,
                'active_today': 0,
                'requests_today': 0,
                'top_user': "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"
            }
        
        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
            [InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_analytics")],
            [InlineKeyboardButton(text="üìù –ó–∞–ø—Ä–æ—Å—ã", callback_data="admin_requests")],
            [InlineKeyboardButton(text="üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_export")],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        logger.info("üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        await callback_query.message.edit_text(
            f"""üõ†Ô∏è <b>–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —é—Ä–∏—Å—Ç"</b>

üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å: {stats['active_today']}
üìù –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {stats['requests_today']}
‚≠ê –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {stats['top_user']}

üéØ <b>–î–ï–ô–°–¢–í–ò–Ø:</b>
–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∏–∂–µ""",
            reply_markup=admin_keyboard,
            parse_mode='HTML'
        )
        logger.info("‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ admin_back: {e}")
        try:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", show_alert=True)
        except Exception:
            pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@dp.message()
async def unknown_message(message: types.Message):
    await message.answer(
        "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.",
        reply_markup=get_main_keyboard()
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —é—Ä–∏—Å—Ç")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        Config.validate()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        await bot.set_my_commands([
            types.BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            types.BotCommand(command="admin", description="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)")
        ])
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == '__main__':
    asyncio.run(main()) 