import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import openai
from ai_service import AIService
from document_processor import DocumentProcessor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from config import Config

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
Config.validate()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=Config.BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
ai_service = AIService(Config.OPENAI_API_KEY)
doc_processor = DocumentProcessor()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class BotStates(StatesGroup):
    waiting_for_case_description = State()
    waiting_for_document_upload = State()
    waiting_for_check_document = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É", callback_data="find_practice")],
        [InlineKeyboardButton(text="üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∂–∞–ª–æ–±—É", callback_data="prepare_complaint")],
        [InlineKeyboardButton(text="üìÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="check_document")],
        [InlineKeyboardButton(text="üì¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º", callback_data="share_bot")]
    ])
    return keyboard

def get_back_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    return keyboard

def get_share_keyboard():
    # –¢–µ–∫—Å—Ç –¥–ª—è WhatsApp —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ
    whatsapp_text = "ü§ñ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ—Ç–∞ *–ü—Ä–∞–∫—Ç–∏–∫–∞.–°—É–¥* - –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å!\n\n‚úÖ –ù–∞–π—Ç–∏ —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É\n‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∂–∞–ª–æ–±—É\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã\n‚úÖ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è\n\nhttps://t.me/dimon82juris_bot"
    # –î–µ–ª–∞–µ–º URL –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å backslash –≤ f-—Å—Ç—Ä–æ–∫–µ
    encoded_text = whatsapp_text.replace(' ', '%20').replace('\n', '%0A')
    whatsapp_url = f"https://wa.me/?text={encoded_text}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì≤ Telegram", switch_inline_query="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ—Ç–∞ –ü—Ä–∞–∫—Ç–∏–∫–∞.–°—É–¥ - –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å!")],
        [InlineKeyboardButton(text="üí¨ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ WhatsApp", url=whatsapp_url)],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    welcome_text = Config.WELCOME_MESSAGE
    
    start_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ñ∂Ô∏è Start", callback_data="start_bot")]
    ])
    
    await message.answer(welcome_text, reply_markup=start_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ Start
@dp.callback_query(F.data == "start_bot")
async def process_start_bot(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        Config.ABOUT_MESSAGE,
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(F.data == "main_menu")
async def process_main_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏
@dp.callback_query(F.data == "find_practice")
async def process_find_practice(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(BotStates.waiting_for_case_description)
    await callback_query.message.edit_text(
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–æ. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "\"–ú–µ–Ω—è —É–≤–æ–ª–∏–ª–∏ –±–µ–∑ –ø—Ä–∏–∫–∞–∑–∞, —Ö–æ—á—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç–µ\"\n\n"
        "–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤—ã –æ–ø–∏—à–µ—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞.",
        reply_markup=get_back_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–∏—Å–∞–Ω–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏
@dp.message(BotStates.waiting_for_case_description)
async def process_case_description(message: types.Message, state: FSMContext):
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å
    processing_message = await message.answer(
        "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –∏ –∏—â—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É...\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò
        analysis = await ai_service.find_legal_practice(message.text)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await processing_message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await message.answer(
            f"üìã **–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏:**\n\n{analysis}",
            reply_markup=get_back_keyboard(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await processing_message.delete()
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–∏—Ç—É–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_keyboard()
        )
        logger.error(f"Error in case analysis: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∂–∞–ª–æ–±—ã
@dp.callback_query(F.data == "prepare_complaint")
async def process_prepare_complaint(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(BotStates.waiting_for_document_upload)
    await callback_query.message.edit_text(
        "üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF, DOCX –∏–ª–∏ TXT.\n\n"
        "–ë–æ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç –ø—Ä–æ–µ–∫—Ç –∞–ø–µ–ª–ª—è—Ü–∏–æ–Ω–Ω–æ–π –∏–ª–∏ –∫–∞—Å—Å–∞—Ü–∏–æ–Ω–Ω–æ–π –∂–∞–ª–æ–±—ã.",
        reply_markup=get_back_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∂–∞–ª–æ–±—ã
@dp.message(BotStates.waiting_for_document_upload)
async def process_document_for_complaint(message: types.Message, state: FSMContext):
    if not message.document:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF, DOCX –∏–ª–∏ TXT.",
            reply_markup=get_back_keyboard()
        )
        return
    
    await state.clear()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    file_extension = message.document.file_name.split('.')[-1].lower()
    if file_extension not in ['pdf', 'docx', 'txt']:
        await message.answer(
            "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç—ã PDF, DOCX –∏ TXT.",
            reply_markup=get_back_keyboard()
        )
        return
    
    processing_message = await message.answer(
        "üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç –∏ –≥–æ—Ç–æ–≤–ª—é –∂–∞–ª–æ–±—É...\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
    )
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(message.document.file_id)
        file_path = f"temp_{message.document.file_id}.{file_extension}"
        await bot.download_file(file.file_path, file_path)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
        document_text = doc_processor.extract_text(file_path)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(file_path)
        
        if not document_text:
            await processing_message.delete()
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.",
                reply_markup=get_back_keyboard()
            )
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∂–∞–ª–æ–±—É —Å –ø–æ–º–æ—â—å—é –ò–ò
        complaint = await ai_service.generate_complaint(document_text)
        
        await processing_message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if len(complaint) > 4000:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–º
            with open(f"complaint_{message.from_user.id}.txt", "w", encoding="utf-8") as f:
                f.write(complaint)
            
            await message.answer_document(
                FSInputFile(f"complaint_{message.from_user.id}.txt"),
                caption="üìù –ü—Ä–æ–µ–∫—Ç –∂–∞–ª–æ–±—ã –≥–æ—Ç–æ–≤! –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
                reply_markup=get_back_keyboard()
            )
            
            os.remove(f"complaint_{message.from_user.id}.txt")
        else:
            await message.answer(
                f"üìù **–ü—Ä–æ–µ–∫—Ç –∂–∞–ª–æ–±—ã:**\n\n{complaint}",
                reply_markup=get_back_keyboard(),
                parse_mode="Markdown"
            )
            
    except Exception as e:
        await processing_message.delete()
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_keyboard()
        )
        logger.error(f"Error in document processing: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
@dp.callback_query(F.data == "check_document")
async def process_check_document(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(BotStates.waiting_for_check_document)
    await callback_query.message.edit_text(
        "üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF, DOCX –∏–ª–∏ TXT.\n\n"
        "–ë–æ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫, –Ω–µ–¥–æ—á–µ—Ç–æ–≤ –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤.",
        reply_markup=get_back_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
@dp.message(BotStates.waiting_for_check_document)
async def process_document_for_check(message: types.Message, state: FSMContext):
    if not message.document:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF, DOCX –∏–ª–∏ TXT.",
            reply_markup=get_back_keyboard()
        )
        return
    
    await state.clear()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    file_extension = message.document.file_name.split('.')[-1].lower()
    if file_extension not in ['pdf', 'docx', 'txt']:
        await message.answer(
            "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç—ã PDF, DOCX –∏ TXT.",
            reply_markup=get_back_keyboard()
        )
        return
    
    processing_message = await message.answer(
        "üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –æ—à–∏–±–∫–∏ –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏...\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
    )
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(message.document.file_id)
        file_path = f"temp_{message.document.file_id}.{file_extension}"
        await bot.download_file(file.file_path, file_path)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
        document_text = doc_processor.extract_text(file_path)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(file_path)
        
        if not document_text:
            await processing_message.delete()
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.",
                reply_markup=get_back_keyboard()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò
        analysis = await ai_service.check_document(document_text)
        
        await processing_message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await message.answer(
            f"üìã **–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞:**\n\n{analysis}",
            reply_markup=get_back_keyboard(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await processing_message.delete()
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_keyboard()
        )
        logger.error(f"Error in document check: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º"
@dp.callback_query(F.data == "share_bot")
async def process_share_bot(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "üì¢ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –Ω–∞—à–µ–º –±–æ—Ç–µ –¥—Ä—É–∑—å—è–º –∏ –∫–æ–ª–ª–µ–≥–∞–º!\n\n"
        "ü§ñ –ë–æ—Ç –ü—Ä–∞–∫—Ç–∏–∫–∞.–°—É–¥ –ø–æ–º–æ–∂–µ—Ç:\n"
        "‚Ä¢ –ù–∞–π—Ç–∏ —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –ø–æ –ª—é–±–æ–º—É —Å–ø–æ—Ä—É\n"
        "‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∞–ø–µ–ª–ª—è—Ü–∏–æ–Ω–Ω—É—é –∂–∞–ª–æ–±—É\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –æ—à–∏–±–∫–∏\n"
        "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å –ò–ò\n\n"
        "–í—Å–µ —É—Å–ª—É–≥–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã!",
        reply_markup=get_share_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@dp.message()
async def unknown_message(message: types.Message):
    await message.answer(
        "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.",
        reply_markup=get_main_keyboard()
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ü—Ä–∞–∫—Ç–∏–∫–∞.–°—É–¥")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        Config.validate()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        await bot.set_my_commands([
            types.BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
        ])
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == '__main__':
    asyncio.run(main()) 