from openai import OpenAI
import logging
import json
import os
from typing import Optional, List, Tuple
from legal_knowledge import LegalKnowledge
from perplexity_service import PerplexityService
from config import Config
import io
import asyncio

logger = logging.getLogger(__name__)

class AIService:
    def __init__(self, api_key: str):
        self.client = OpenAI(api_key=api_key)
        self.perplexity = PerplexityService()
        
        logger.info("üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Perplexity API –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ")
    


    
    async def _get_relevant_legal_articles(self, query: str, top_k: int = 10) -> str:
        """–ù–∞—Ö–æ–¥–∏—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ Perplexity API"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
        if not query or not isinstance(query, str) or not query.strip():
            logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π")
            return "\n\nüéØ <b>–û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ü–†–ê–í–û–í–´–ú –í–û–ü–†–û–°–ê–ú:</b>\n" \
                   "‚Ä¢ –ò–∑—É—á–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–∞–≤–∞ –∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏\n" \
                   "‚Ä¢ –°–æ–±–µ—Ä–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n" \
                   "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É\n" \
                   "‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ä–æ–∫–∏\n\n"
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è Perplexity
            query_lower = query.lower()
            context_type = "general"
            
            # –ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ
            if any(word in query_lower for word in ["–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ", "–Ω–µ—Å–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–¥–æ–ª–≥", "–∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å", "–∫—Ä–µ–¥–∏—Ç–æ—Ä", "–¥–æ–ª–∂–Ω–∏–∫"]):
                context_type = "bankruptcy"
            # –¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ
            elif any(word in query_lower for word in ["—Ä–∞–±–æ—Ç–∞", "—É–≤–æ–ª—å–Ω–µ–Ω–∏–µ", "–∑–∞—Ä–ø–ª–∞—Ç–∞", "—Ç—Ä—É–¥–æ–≤–æ–π", "–æ—Ç–ø—É—Å–∫", "–±–æ–ª—å–Ω–∏—á–Ω—ã–π"]):
                context_type = "labor"
            # –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –ø—Ä–∞–≤–æ
            elif any(word in query_lower for word in ["–¥–æ–≥–æ–≤–æ—Ä", "–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", "–ø–æ–∫—É–ø–∫–∞", "–ø—Ä–æ–¥–∞–∂–∞", "—É—Å–ª—É–≥–∏", "—É—â–µ—Ä–±"]):
                context_type = "civil"
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Perplexity API
            logger.info(f"üåê –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Perplexity API: {query}")
            perplexity_result = await self.perplexity.search_legal_info(query.strip(), context_type)
            
            if perplexity_result:
                logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Perplexity API")
                return f"\n\n{perplexity_result}\n\n"
            else:
                logger.warning("‚ö†Ô∏è Perplexity API –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return "\n\n‚ùå <b>–ü–û–ò–°–ö –ù–ï –î–ê–õ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í</b>\n" \
                       "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–µ–º—É —é—Ä–∏—Å—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.\n\n"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Perplexity API: {e}")
            return "\n\n‚ùå <b>–û–®–ò–ë–ö–ê –ü–û–ò–°–ö–ê</b>\n" \
                   "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–µ–º—É —é—Ä–∏—Å—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.\n\n"
    

    
    async def find_legal_practice(self, case_description: str) -> str:
        """–ü–æ–∏—Å–∫ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é —Å–∏—Ç—É–∞—Ü–∏–∏"""
        # –ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if case_description is None:
            logger.error("‚ùå case_description —Ä–∞–≤–µ–Ω None –≤ –Ω–∞—á–∞–ª–µ find_legal_practice")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–∏—Ç—É–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
        
        if not isinstance(case_description, str):
            logger.error(f"‚ùå case_description –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞: {type(case_description)}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–∏—Ç—É–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ Perplexity API
            perplexity_response = await self._get_relevant_legal_articles(case_description, top_k=8)
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Perplexity, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
            if perplexity_response and "üîç –ê–ö–¢–£–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò–ó –ò–ù–¢–ï–†–ù–ï–¢–ê:" in perplexity_response:
                logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Perplexity API –Ω–∞–ø—Ä—è–º—É—é")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
                if len(perplexity_response) > 4000:
                    # –†–∞–∑–¥–µ–ª—è–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏
                    parts = self._split_long_response(perplexity_response)
                    return parts  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π
                else:
                    return perplexity_response
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É —Å GPT
            system_prompt = LegalKnowledge.get_system_prompt_for_practice()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Perplexity API
            if perplexity_response:
                system_prompt += f"\n\n{perplexity_response}"
                system_prompt += "\n\nüéØ –°–û–•–†–ê–ù–ò–¢–ï –í–°–ï –î–ï–¢–ê–õ–ò, –°–¢–ê–¢–¨–ò –ò –°–°–´–õ–ö–ò –ò–ó –ò–ù–§–û–†–ú–ê–¶–ò–ò –í–´–®–ï!"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ
            if not case_description:
                logger.error("‚ùå case_description —Ä–∞–≤–µ–Ω None –≤ find_legal_practice")
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–∏—Ç—É–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
            
            case_lower = case_description.lower()
            is_bankruptcy_query = any(word in case_lower for word in ["–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ", "–Ω–µ—Å–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–¥–æ–ª–≥", "–∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å", "–∫—Ä–µ–¥–∏—Ç–æ—Ä", "–¥–æ–ª–∂–Ω–∏–∫"])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
            if is_bankruptcy_query:
                # –î–ª—è –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                bankruptcy_context = self._detect_bankruptcy_context(case_description)
                enhanced_query = f"""–ó–ê–î–ê–ß–ê: –î–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤—É

–û–ü–ò–°–ê–ù–ò–ï –°–ò–¢–£–ê–¶–ò–ò:
{case_description}

–ö–û–ù–¢–ï–ö–°–¢ –ë–ê–ù–ö–†–û–¢–°–¢–í–ê:
{f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞: {bankruptcy_context['procedure_type']}" if bankruptcy_context['is_bankruptcy'] else "–ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"}
{f"–°—É–º–º–∞ –¥–æ–ª–≥–∞: {bankruptcy_context['debt_amount']:,} —Ä—É–±–ª–µ–π" if bankruptcy_context['debt_amount'] else ""}

–û–°–û–ë–ï–ù–ù–û–°–¢–ò –î–õ–Ø –ë–ê–ù–ö–†–û–¢–°–¢–í–ê:
- –î–ª—è —Å—É–º–º –¥–æ 1 –º–ª–Ω —Ä—É–±–ª–µ–π: —Ä–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ –í–ù–ï–°–£–î–ï–ë–ù–û–ï –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ
- –î–ª—è —Å—É–º–º –æ—Ç 500 —Ç—ã—Å —Ä—É–±–ª–µ–π: –º–æ–∂–Ω–æ –°–£–î–ï–ë–ù–û–ï –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ
- –î–ª—è —Å—É–º–º –¥–æ 25 —Ç—ã—Å —Ä—É–±–ª–µ–π: –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ –ù–ï–í–û–ó–ú–û–ñ–ù–û

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –û–¢–í–ï–¢–£:
1. –ù–ï –°–°–´–õ–ê–ô–¢–ï–°–¨ –Ω–∞ –∑–∞–∫–æ–Ω—ã, —Å—Ç–∞—Ç—å–∏ –∏ –∫–æ–¥–µ–∫—Å—ã
2. –ì–û–í–û–†–ò–¢–ï –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º
3. –î–ê–í–ê–ô–¢–ï –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ—à–∞–≥–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
4. –£–ö–ê–ó–´–í–ê–ô–¢–ï –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—É–º–º—ã, —Å—Ä–æ–∫–∏, –º–µ—Å—Ç–∞
5. –§–û–ö–£–°–ò–†–£–ô–¢–ï–°–¨ –Ω–∞ —Ç–æ–º, —á—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"""
            else:
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—ã—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç
                enhanced_query = f"""–ó–ê–î–ê–ß–ê: –î–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã

–û–ü–ò–°–ê–ù–ò–ï –°–ò–¢–£–ê–¶–ò–ò:
{case_description}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –û–¢–í–ï–¢–£:
1. –ù–ï –°–°–´–õ–ê–ô–¢–ï–°–¨ –Ω–∞ –∑–∞–∫–æ–Ω—ã, —Å—Ç–∞—Ç—å–∏ –∏ –∫–æ–¥–µ–∫—Å—ã
2. –ì–û–í–û–†–ò–¢–ï –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º
3. –î–ê–í–ê–ô–¢–ï –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ—à–∞–≥–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
4. –£–ö–ê–ó–´–í–ê–ô–¢–ï –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—É–º–º—ã, —Å—Ä–æ–∫–∏, –º–µ—Å—Ç–∞
5. –§–û–ö–£–°–ò–†–£–ô–¢–ï–°–¨ –Ω–∞ —Ç–æ–º, —á—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
6. –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
7. –ë–£–î–¨–¢–ï –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
1. –ß–¢–û –ü–†–û–ò–ó–û–®–õ–û (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
2. –í–ê–®–ò –ü–†–ê–í–ê (–ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏)
3. –ö–û–ù–ö–†–ï–¢–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø (–ø–æ—à–∞–≥–æ–≤–æ —á—Ç–æ –¥–µ–ª–∞—Ç—å)
4. –î–û–ö–£–ú–ï–ù–¢–´ (—á—Ç–æ —Å–æ–±—Ä–∞—Ç—å)
5. –°–†–û–ö–ò (–∫–æ–≥–¥–∞ —á—Ç–æ –¥–µ–ª–∞—Ç—å)
6. –†–ï–ó–£–õ–¨–¢–ê–¢ (—á—Ç–æ –ø–æ–ª—É—á–∏—Ç–µ)"""

            ai_response = self.client.chat.completions.create(
                model=Config.GPT_MODEL,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": enhanced_query}
                ],
                temperature=0.0
            )
            
            ai_analysis = ai_response.choices[0].message.content
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–º–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—å–∏ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            legal_references = self._generate_smart_legal_references(case_description)
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∫–ª–∞–º—É
            final_response = f"""{ai_analysis}{legal_references}

---

‚ùì <b>–ù–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç–∞? –í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã?</b>
üÜì <b>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</b> @ZachitaPrava02"""
            
            return final_response
        
        # –û—Å–Ω–æ–≤–Ω–æ–π except –±–ª–æ–∫ –¥–ª—è find_legal_practice  
        except Exception as e:
            logger.error(f"Error in find_legal_practice: {e}")
            if "insufficient_quota" in str(e) or "429" in str(e):
                return """‚ùå <b>–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ OpenAI API</b>

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏—Å—á–µ—Ä–ø–∞–Ω–∞ –∫–≤–æ—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò.

üìã <b>–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é:</b>

<b>–£–≤–æ–ª—å–Ω–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–∏–∫–∞–∑–∞</b> - —Å–µ—Ä—å–µ–∑–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ç—Ä—É–¥–æ–≤–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞.

<b>–í–∞—à–∏ –ø—Ä–∞–≤–∞:</b>
‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ (—Å—Ç. 394 –¢–ö –†–§)  
‚Ä¢ –û–ø–ª–∞—Ç–∞ –≤—ã–Ω—É–∂–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—É–ª–∞
‚Ä¢ –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –º–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–¥–∞

<b>–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞:</b>
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–° –†–§ ‚Ññ 18-–ö–ì20-17
‚Ä¢ –ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ü–ª–µ–Ω—É–º–∞ –í–° –†–§ ‚Ññ 2

<b>–î–µ–π—Å—Ç–≤–∏—è:</b>
1. –¢—Ä–µ–±—É–π—Ç–µ –ø–∏—Å—å–º–µ–Ω–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω —É–≤–æ–ª—å–Ω–µ–Ω–∏—è
2. –°–æ–±–∏—Ä–∞–π—Ç–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø—Ä–∏–∫–∞–∑–∞
3. –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Å—É–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–µ—Å—è—Ü–∞
4. –ü–æ–¥–∞–≤–∞–π—Ç–µ –∏—Å–∫ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ

<b>–î–æ–∫—É–º–µ–Ω—Ç—ã:</b> —Ç—Ä—É–¥–æ–≤–∞—è –∫–Ω–∏–∂–∫–∞, —Å–ø—Ä–∞–≤–∫–∏ –æ –¥–æ—Ö–æ–¥–∞—Ö, —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è."""
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–∏—Ç—É–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
    
    def _split_long_response(self, response: str) -> list:
        """–†–∞–∑–¥–µ–ª—è–µ—Ç –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        try:
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è —Ä–µ–∫–ª–∞–º—ã)
            max_length = 3800
            
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if len(response) <= max_length:
                return [response]
            
            parts = []
            current_part = ""
            lines = response.split('\n')
            
            for line in lines:
                # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
                if len(current_part + line + '\n') <= max_length:
                    current_part += line + '\n'
                else:
                    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —á–∞—Å—Ç—å –Ω–µ –ø—É—Å—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
                    if current_part.strip():
                        parts.append(current_part.strip())
                    
                    # –ï—Å–ª–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, —Ä–∞–∑—Ä–µ–∑–∞–µ–º –µ—ë
                    if len(line) > max_length:
                        while line:
                            chunk = line[:max_length]
                            parts.append(chunk)
                            line = line[max_length:]
                        current_part = ""
                    else:
                        current_part = line + '\n'
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
            if current_part.strip():
                parts.append(current_part.strip())
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ —á–∞—Å—Ç–µ–π
            if len(parts) > 1:
                for i, part in enumerate(parts, 1):
                    parts[i-1] = f"üìÑ **–ß–ê–°–¢–¨ {i} –ò–ó {len(parts)}**\n\n{part}"
            
            logger.info(f"üìÑ –û—Ç–≤–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ {len(parts)} —á–∞—Å—Ç–µ–π")
            return parts
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}")
            return [response[:3800]]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç

    
    def _generate_specific_legal_references(self, query: str) -> str:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–µ–±-–ø–æ–∏—Å–∫"""
        logger.info("üåê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–µ–±-–ø–æ–∏—Å–∫")
        return ""
    
    def _detect_query_context(self, query: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–µ–π"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
        if not query or not isinstance(query, str) or not query.strip():
            logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
            return '–æ–±—â–µ–µ'
        
        query_lower = query.strip().lower()
        
        # –¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ
        labor_keywords = [
            '—É–≤–æ–ª—å–Ω–µ–Ω–∏–µ', '—Ä–∞–±–æ—Ç–∞', '—Ç—Ä—É–¥–æ–≤–æ–π', '–∑–∞—Ä–ø–ª–∞—Ç–∞', '–∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞', '–æ—Ç–ø—É—Å–∫',
            '–±–æ–ª—å–Ω–∏—á–Ω—ã–π', '—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å', '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫', '—Ç—Ä—É–¥–æ–≤–∞—è –∫–Ω–∏–∂–∫–∞', '–ø—Ä–æ–≥—É–ª',
            '—Ç—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä', '—à—Ç—Ä–∞—Ñ', '–ø—Ä–µ–º–∏—è', '–∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞', '—Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–µ',
            '–¥–µ–∫—Ä–µ—Ç', '–æ—Ç–≥—É–ª', '–≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã', '–≤—ã—Ö–æ–¥–Ω—ã–µ', '–ø—Ä–∞–∑–¥–Ω–∏–∫–∏', '–æ—Ç—Ä–∞–±–æ—Ç–∫–∞'
        ]
        
        # –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –ø—Ä–∞–≤–æ
        civil_keywords = [
            '–¥–æ–≥–æ–≤–æ—Ä', '—Å–¥–µ–ª–∫–∞', '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å', '–ø–æ–∫—É–ø–∫–∞', '–ø—Ä–æ–¥–∞–∂–∞', '–∞—Ä–µ–Ω–¥–∞',
            '–∑–∞–π–º', '–∫—Ä–µ–¥–∏—Ç', '–∑–∞–ª–æ–≥', '–Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ', '–¥–∞—Ä–µ–Ω–∏–µ', '—É—â–µ—Ä–±', '–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è',
            '—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å', '—É—Å–ª—É–≥–∏', '–ø–æ–¥—Ä—è–¥', '–ø–æ—Å—Ç–∞–≤–∫–∞'
        ]
        
        # –°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ
        family_keywords = [
            '–±—Ä–∞–∫', '—Ä–∞–∑–≤–æ–¥', '–∞–ª–∏–º–µ–Ω—Ç—ã', '–¥–µ—Ç–∏', '–æ–ø–µ–∫–∞', '—É—Å—ã–Ω–æ–≤–ª–µ–Ω–∏–µ', '—Å—É–ø—Ä—É–≥',
            '—Å–µ–º—å—è', '–º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–π –∫–∞–ø–∏—Ç–∞–ª', '–æ—Ç—Ü–æ–≤—Å—Ç–≤–æ', '–º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ'
        ]
        
        # –ñ–∏–ª–∏—â–Ω–æ–µ –ø—Ä–∞–≤–æ
        housing_keywords = [
            '–∫–≤–∞—Ä—Ç–∏—Ä–∞', '–¥–æ–º', '–∂–∏–ª—å–µ', '–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏', '—É–ø—Ä–∞–≤–ª—è—é—â–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
            '—Ç—Å–∂', '–∫–∞–ø—Ä–µ–º–æ–Ω—Ç', '–ø—Ä–∏–≤–∞—Ç–∏–∑–∞—Ü–∏—è', '–≤—ã—Å–µ–ª–µ–Ω–∏–µ', '–ø—Ä–æ–ø–∏—Å–∫–∞', '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
        ]
        
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ
        admin_keywords = [
            '—à—Ç—Ä–∞—Ñ', '–≥–∏–±–¥–¥', '–ø–∞—Ä–∫–æ–≤–∫–∞', '–Ω–∞—Ä—É—à–µ–Ω–∏–µ', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π',
            '–ø—Ä–æ—Ç–æ–∫–æ–ª', '–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', '–∂–∞–ª–æ–±–∞ –Ω–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ'
        ]
        
        # –ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ
        bankruptcy_keywords = [
            '–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ', '–¥–æ–ª–≥', '–∫—Ä–µ–¥–∏—Ç–æ—Ä—ã', '–¥–æ–ª–∂–Ω–∏–∫', '–Ω–µ—Å–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
            '—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É–ø—Ä–∞–≤–ª—è—é—â–∏–π', '–∫–æ–Ω–∫—É—Ä—Å–Ω–∞—è –º–∞—Å—Å–∞'
        ]
        
        # –£–≥–æ–ª–æ–≤–Ω–æ–µ –ø—Ä–∞–≤–æ
        criminal_keywords = [
            '–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ', '—É–≥–æ–ª–æ–≤–Ω—ã–π', '—Å–ª–µ–¥—Å—Ç–≤–∏–µ', '–æ–±–≤–∏–Ω–µ–Ω–∏–µ', '—Å—É–¥',
            '–ø—Ä–∏–≥–æ–≤–æ—Ä', '–∞–¥–≤–æ–∫–∞—Ç', '–ø–æ—Ç–µ—Ä–ø–µ–≤—à–∏–π'
        ]
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        contexts = {
            '—Ç—Ä—É–¥–æ–≤–æ–µ': sum(1 for keyword in labor_keywords if keyword in query_lower),
            '–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ': sum(1 for keyword in civil_keywords if keyword in query_lower),
            '—Å–µ–º–µ–π–Ω–æ–µ': sum(1 for keyword in family_keywords if keyword in query_lower),
            '–∂–∏–ª–∏—â–Ω–æ–µ': sum(1 for keyword in housing_keywords if keyword in query_lower),
            '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ': sum(1 for keyword in admin_keywords if keyword in query_lower),
            '–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ': sum(1 for keyword in bankruptcy_keywords if keyword in query_lower),
            '—É–≥–æ–ª–æ–≤–Ω–æ–µ': sum(1 for keyword in criminal_keywords if keyword in query_lower)
        }
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        max_context = max(contexts, key=contexts.get)
        max_count = contexts[max_context]
        
        if max_count > 0:
            return max_context
        else:
            return '–æ–±—â–µ–µ'
    
    def _filter_articles_by_context(self, articles, context: str, min_score: float = 0.3):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Å—Ç–∞—Ç—å–∏ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∑–∞–ø—Ä–æ—Å–∞"""
        allowed_document_types = {
            '—Ç—Ä—É–¥–æ–≤–æ–µ': {
                '–¢—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å –†–§',
                '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§',
                '–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§'
            },
            '–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ': {
                '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–§',
                '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§',
                '–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§'
            },
            '—Å–µ–º–µ–π–Ω–æ–µ': {
                '–°–µ–º–µ–π–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§',
                '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–§',
                '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§'
            },
            '–∂–∏–ª–∏—â–Ω–æ–µ': {
                '–ñ–∏–ª–∏—â–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§',
                '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–§',
                '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§'
            },
            '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ': {
                '–ö–æ–¥–µ–∫—Å –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –†–§',
                '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§'
            },
            '–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ': {
                '–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω',
                '–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§',
                '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–§'
            },
            '—É–≥–æ–ª–æ–≤–Ω–æ–µ': {
                '–£–≥–æ–ª–æ–≤–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§',
                '–£–≥–æ–ª–æ–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§',
                '–£–≥–æ–ª–æ–≤–Ω–æ-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§'
            },
            '–æ–±—â–µ–µ': {
                '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–§',
                '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§',
                '–¢—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å –†–§'
            }
        }
        
        allowed_types = allowed_document_types.get(context, allowed_document_types['–æ–±—â–µ–µ'])
        
        filtered_results = []
        for entry, score in articles:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            if score < min_score:
                continue
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
            doc_type = self._get_document_type(entry.source_file)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º —Ç–∏–ø–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            if doc_type in allowed_types:
                filtered_results.append((entry, score))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∫–æ—Ä—É –∏ –±–µ—Ä–µ–º —Ç–æ–ø-10
        filtered_results.sort(key=lambda x: x[1], reverse=True)
        return filtered_results[:10]
    
    def _get_priority_order_for_context(self, context: str) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        priority_orders = {
            '—Ç—Ä—É–¥–æ–≤–æ–µ': [
                "–¢—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å –†–§",
                "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§",
                "–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
            ],
            '–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ': [
                "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–§",
                "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§",
                "–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
            ],
            '—Å–µ–º–µ–π–Ω–æ–µ': [
                "–°–µ–º–µ–π–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§",
                "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–§",
                "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
            ],
            '–∂–∏–ª–∏—â–Ω–æ–µ': [
                "–ñ–∏–ª–∏—â–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§",
                "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–§",
                "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
            ],
            '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ': [
                "–ö–æ–¥–µ–∫—Å –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –†–§",
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
            ],
            '–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ': [
                "–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω",
                "–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§",
                "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–§"
            ],
            '—É–≥–æ–ª–æ–≤–Ω–æ–µ': [
                "–£–≥–æ–ª–æ–≤–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§",
                "–£–≥–æ–ª–æ–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§",
                "–£–≥–æ–ª–æ–≤–Ω–æ-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
            ]
        }
        
        return priority_orders.get(context, [
            "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–§",
            "–¢—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å –†–§",
            "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
        ])
    
    def _get_document_type(self, source_file: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        source_file_lower = source_file.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∞–π–ª–∞
        if "—Ç—Ä—É–¥–æ–≤–æ–π" in source_file_lower or "23.txt" in source_file_lower:
            return "–¢—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å –†–§"
        elif "–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π" in source_file_lower and "–ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π" in source_file_lower:
            return "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
        elif "–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π" in source_file_lower:
            return "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–§"
        elif "–∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π" in source_file_lower:
            return "–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
        elif "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π" in source_file_lower and "–∫–æ–¥–µ–∫—Å" in source_file_lower:
            return "–ö–æ–¥–µ–∫—Å –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –†–§"
        elif "—É–≥–æ–ª–æ–≤–Ω—ã–π" in source_file_lower and "–ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π" in source_file_lower:
            return "–£–≥–æ–ª–æ–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
        elif "—É–≥–æ–ª–æ–≤–Ω—ã–π" in source_file_lower:
            return "–£–≥–æ–ª–æ–≤–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
        elif "—Å–µ–º–µ–π–Ω—ã–π" in source_file_lower or "25.txt" in source_file_lower:
            return "–°–µ–º–µ–π–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
        elif "–∂–∏–ª–∏—â–Ω—ã–π" in source_file_lower or "26.txt" in source_file_lower:
            return "–ñ–∏–ª–∏—â–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
        elif "–∑–µ–º–µ–ª—å–Ω—ã–π" in source_file_lower or "24.txt" in source_file_lower:
            return "–ó–µ–º–µ–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
        elif "–Ω–∞–ª–æ–≥–æ–≤—ã–π" in source_file_lower or "12.txt" in source_file_lower:
            return "–ù–∞–ª–æ–≥–æ–≤—ã–π –∫–æ–¥–µ–∫—Å –†–§"
        elif "–±—é–¥–∂–µ—Ç–Ω—ã–π" in source_file_lower or "27.txt" in source_file_lower:
            return "–ë—é–¥–∂–µ—Ç–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
        elif "—Ç–∞–º–æ–∂–µ–Ω–Ω—ã–π" in source_file_lower or "22.txt" in source_file_lower:
            return "–¢–∞–º–æ–∂–µ–Ω–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
        elif "–ª–µ—Å–Ω–æ–π" in source_file_lower or "31.txt" in source_file_lower:
            return "–õ–µ—Å–Ω–æ–π –∫–æ–¥–µ–∫—Å –†–§"
        elif "–≤–æ–∑–¥—É—à–Ω—ã–π" in source_file_lower or "32.txt" in source_file_lower:
            return "–í–æ–∑–¥—É—à–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
        elif "–≤–æ–¥–Ω—ã–π" in source_file_lower or "33.txt" in source_file_lower:
            return "–í–æ–¥–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
        elif "–º–æ—Ä—Å–∫–æ–π" in source_file_lower or "35.txt" in source_file_lower:
            return "–ö–æ–¥–µ–∫—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –º–æ—Ä–µ–ø–ª–∞–≤–∞–Ω–∏—è –†–§"
        elif "–≥—Ä–∞–¥–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π" in source_file_lower or "36.txt" in source_file_lower:
            return "–ì—Ä–∞–¥–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
        elif "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π" in source_file_lower or "30.txt" in source_file_lower:
            return "–£–≥–æ–ª–æ–≤–Ω–æ-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
        elif "–∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è" in source_file_lower or "56.txt" in source_file_lower:
            return "–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è –†–§"
        elif "—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω" in source_file_lower or "—Ñ–∑" in source_file_lower:
            return "–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω"
        else:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –Ω–æ–º–µ—Ä—É —Ñ–∞–π–ª–∞ "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–ü–ª—é—Å"
            if "–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–ø–ª—é—Å" in source_file_lower:
                if "12" in source_file_lower:
                    return "–ù–∞–ª–æ–≥–æ–≤—ã–π –∫–æ–¥–µ–∫—Å –†–§"
                elif "13" in source_file_lower:
                    return "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–§"
                elif "14" in source_file_lower:
                    return "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–§"
                elif "15" in source_file_lower:
                    return "–ù–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–∞–≤–æ"
                elif "16" in source_file_lower:
                    return "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞"
                elif "18" in source_file_lower:
                    return "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
                elif "19" in source_file_lower:
                    return "–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
                elif "20" in source_file_lower:
                    return "–ö–æ–¥–µ–∫—Å –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –†–§"
                elif "21" in source_file_lower:
                    return "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
                elif "22" in source_file_lower:
                    return "–¢–∞–º–æ–∂–µ–Ω–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
                elif "23" in source_file_lower:
                    return "–¢—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å –†–§"
                elif "24" in source_file_lower:
                    return "–ó–µ–º–µ–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
                elif "25" in source_file_lower:
                    return "–°–µ–º–µ–π–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
                elif "26" in source_file_lower:
                    return "–ñ–∏–ª–∏—â–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
                elif "27" in source_file_lower:
                    return "–ë—é–¥–∂–µ—Ç–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
                elif "28" in source_file_lower:
                    return "–£–≥–æ–ª–æ–≤–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
                elif "29" in source_file_lower:
                    return "–£–≥–æ–ª–æ–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
                elif "30" in source_file_lower:
                    return "–£–≥–æ–ª–æ–≤–Ω–æ-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
                elif "31" in source_file_lower:
                    return "–õ–µ—Å–Ω–æ–π –∫–æ–¥–µ–∫—Å –†–§"
                elif "32" in source_file_lower:
                    return "–í–æ–∑–¥—É—à–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
                elif "33" in source_file_lower:
                    return "–í–æ–¥–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
                elif "34" in source_file_lower:
                    return "–ö–æ–¥–µ–∫—Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –≤–æ–¥–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –†–§"
                elif "35" in source_file_lower:
                    return "–ö–æ–¥–µ–∫—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –º–æ—Ä–µ–ø–ª–∞–≤–∞–Ω–∏—è –†–§"
                elif "36" in source_file_lower:
                    return "–ì—Ä–∞–¥–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§"
                elif "56" in source_file_lower:
                    return "–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è –†–§"
                elif "—É–∫341" in source_file_lower:
                    return "–ù–∞–ª–æ–≥–æ–≤—ã–π –∫–æ–¥–µ–∫—Å –†–§"
                    
            return "–î—Ä—É–≥–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"
    
    async def generate_complaint(self, court_decision_text: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ø–µ–ª–ª—è—Ü–∏–æ–Ω–Ω–æ–π/–∫–∞—Å—Å–∞—Ü–∏–æ–Ω–Ω–æ–π –∂–∞–ª–æ–±—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ Perplexity API
            relevant_articles = await self._get_relevant_legal_articles(court_decision_text, top_k=8)
            
            system_prompt = LegalKnowledge.get_system_prompt_for_complaint()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Perplexity API
            if relevant_articles:
                system_prompt += f"\n\n{relevant_articles}"
                system_prompt += "\n\nüéØ –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –ê–ö–¢–£–ê–õ–¨–ù–£–Æ –ò–ù–§–û–†–ú–ê–¶–ò–Æ –ò–ó –ò–ù–¢–ï–†–ù–ï–¢–ê –î–õ–Ø –°–û–°–¢–ê–í–õ–ï–ù–ò–Ø –ñ–ê–õ–û–ë–´!"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ò–ò
            enhanced_query = f"""–ó–ê–î–ê–ß–ê: –°–æ—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ —Å—É–¥–∞

–†–ï–®–ï–ù–ò–ï –°–£–î–ê:
{court_decision_text}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ñ–ê–õ–û–ë–ï:
1. –ù–ï –°–°–´–õ–ê–ô–¢–ï–°–¨ –Ω–∞ –∑–∞–∫–æ–Ω—ã, —Å—Ç–∞—Ç—å–∏ –∏ –∫–æ–¥–µ–∫—Å—ã
2. –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –ø—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
3. –§–û–ö–£–°–ò–†–£–ô–¢–ï–°–¨ –Ω–∞ —Ñ–∞–∫—Ç–∞—Ö –∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö
4. –î–ê–í–ê–ô–¢–ï –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã
5. –ë–£–î–¨–¢–ï –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –≤ –∫–∞–∂–¥–æ–º –ø—É–Ω–∫—Ç–µ
6. –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï —Å–ª–æ–∂–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã

–°–¢–†–£–ö–¢–£–†–ê –ñ–ê–õ–û–ë–´:
1. –ö–û–ú–£ (–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É–¥–∞)
2. –û–¢ –ö–û–ì–û (–≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ)
3. –ß–¢–û –°–õ–£–ß–ò–õ–û–°–¨ (—Ñ–∞–∫—Ç—ã –∏–∑ —Ä–µ—à–µ–Ω–∏—è)
4. –ü–û–ß–ï–ú–£ –≠–¢–û –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è)
5. –ß–¢–û –¢–†–ï–ë–£–ï–¢–ï (–æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ, –ø—Ä–∏–Ω—è—Ç—å –Ω–æ–≤–æ–µ)
6. –î–û–ö–£–ú–ï–ù–¢–´ (—Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π)

–ü–†–ò–ú–ï–†–´ –•–û–†–û–®–ï–ì–û –¢–ï–ö–°–¢–ê:
‚úÖ "–°—É–¥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ü–µ–Ω–∏–ª –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞"
‚úÖ "–ú–µ–Ω—è –Ω–µ –≤—ã—Å–ª—É—à–∞–ª–∏ –¥–æ–ª–∂–Ω—ã–º –æ–±—Ä–∞–∑–æ–º"
‚úÖ "–¢—Ä–µ–±—É—é –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ"
‚úÖ "–ü—Ä–æ—à—É –ø—Ä–∏–Ω—è—Ç—å –Ω–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –≤ –º–æ—é –ø–æ–ª—å–∑—É"

–ó–ê–ü–†–ï–©–ï–ù–û:
- –°—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–∫–æ–Ω—ã –∏ —Å—Ç–∞—Ç—å–∏
- –°–ª–æ–∂–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
- –û–±—â–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
- –î–ª–∏–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

–î–ê–ô–¢–ï –ì–û–¢–û–í–´–ô –¢–ï–ö–°–¢ –ñ–ê–õ–û–ë–´!"""

            response = self.client.chat.completions.create(
                model=Config.GPT_MODEL,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": enhanced_query}
                ],
                temperature=0.0
            )
            
            complaint_text = response.choices[0].message.content
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–º–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—å–∏ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            legal_references = self._generate_smart_legal_references(court_decision_text)
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∫–ª–∞–º—É
            final_response = f"""{complaint_text}{legal_references}

---

‚ùì <b>–ù–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç–∞? –í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã?</b>
üÜì <b>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</b> @ZachitaPrava02"""
            
            return final_response
            
        except Exception as e:
            logger.error(f"Error in generate_complaint: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
    
    async def check_document(self, document_text: str) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ Perplexity API
            relevant_articles = await self._get_relevant_legal_articles(document_text, top_k=8)
            
            system_prompt = LegalKnowledge.get_system_prompt_for_check()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Perplexity API
            if relevant_articles:
                system_prompt += f"\n\n{relevant_articles}"
                system_prompt += "\n\nüéØ –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –ê–ö–¢–£–ê–õ–¨–ù–£–Æ –ò–ù–§–û–†–ú–ê–¶–ò–Æ –ò–ó –ò–ù–¢–ï–†–ù–ï–¢–ê –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –î–û–ö–£–ú–ï–ù–¢–ê!"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ò–ò
            enhanced_query = f"""–ó–ê–î–ê–ß–ê: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–∫–æ–Ω–∞–º

–î–û–ö–£–ú–ï–ù–¢ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò:
{document_text}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ü–†–û–í–ï–†–ö–ï:
1. –ù–ï –°–°–´–õ–ê–ô–¢–ï–°–¨ –Ω–∞ –∑–∞–∫–æ–Ω—ã, —Å—Ç–∞—Ç—å–∏ –∏ –∫–æ–¥–µ–∫—Å—ã
2. –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –ø—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
3. –§–û–ö–£–°–ò–†–£–ô–¢–ï–°–¨ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö
4. –î–ê–í–ê–ô–¢–ï –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
5. –ë–£–î–¨–¢–ï –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –≤ –∫–∞–∂–¥–æ–º –ø—É–Ω–∫—Ç–µ
6. –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï —Å–ª–æ–∂–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã

–°–¢–†–£–ö–¢–£–†–ê –ü–†–û–í–ï–†–ö–ò:
1. –ß–¢–û –ü–†–û–í–ï–†–Ø–ï–ú (–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞)
2. –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è)
3. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò (–∫–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å)
4. –ü–û–°–õ–ï–î–°–¢–í–ò–Ø (—á—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏)

–ü–†–ò–ú–ï–†–´ –•–û–†–û–®–ï–ì–û –ê–ù–ê–õ–ò–ó–ê:
‚úÖ "–í –¥–æ–≥–æ–≤–æ—Ä–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–∞–∂–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ"
‚úÖ "–≠—Ç–∞ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è—Ç–∞"
‚úÖ "–î–æ–±–∞–≤—å—Ç–µ –ø—É–Ω–∫—Ç –æ..."
‚úÖ "–ë–µ–∑ —ç—Ç–æ–≥–æ —É—Å–ª–æ–≤–∏—è –≤—ã —Ä–∏—Å–∫—É–µ—Ç–µ..."

–ó–ê–ü–†–ï–©–ï–ù–û:
- –°—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–∫–æ–Ω—ã –∏ —Å—Ç–∞—Ç—å–∏
- –°–ª–æ–∂–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
- –û–±—â–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
- –î–ª–∏–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

–î–ê–ô–¢–ï –ö–û–ù–ö–†–ï–¢–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò!"""

            response = self.client.chat.completions.create(
                model=Config.GPT_MODEL,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": enhanced_query}
                ],
                temperature=0.0
            )
            
            document_analysis = response.choices[0].message.content
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–º–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—å–∏ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            legal_references = self._generate_smart_legal_references(document_text)
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∫–ª–∞–º—É
            final_response = f"""{document_analysis}{legal_references}

---

‚ùì <b>–ù–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç–∞? –í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã?</b>
üÜì <b>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</b> @ZachitaPrava02"""
            
            return final_response
            
        except Exception as e:
            logger.error(f"Error in check_document: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
    
    async def get_constitutional_analysis(self, query: str, system_prompt: str, context: str = None) -> str:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Perplexity API"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ Perplexity API
            if not context:
                context = await self._get_relevant_legal_articles(query, top_k=5)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            full_query = f"–í–û–ü–†–û–°: {query}\n\n{context}\n\n–î–∞–π—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞."
            
            response = self.client.chat.completions.create(
                model=Config.GPT_MODEL,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": full_query}
                ],
                temperature=0.0
            )
            
            analysis_text = response.choices[0].message.content
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_response = f"""{analysis_text}

---

‚ùì <b>–ù–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç–∞? –í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã?</b>
üÜì <b>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</b> @ZachitaPrava02"""
            
            return final_response
            
        except Exception as e:
            logger.error(f"Error in constitutional analysis: {e}")
            if "insufficient_quota" in str(e) or "429" in str(e):
                return f"""‚ùå <b>–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ OpenAI API</b>

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏—Å—á–µ—Ä–ø–∞–Ω–∞ –∫–≤–æ—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò.

üìã <b>–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É:</b> "{query}"

<b>–û–°–ù–û–í–´ –ö–û–ù–°–¢–ò–¢–£–¶–ò–û–ù–ù–û–ì–û –ü–†–ê–í–ê –†–§:</b>

‚Ä¢ <b>–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è –†–§</b> - –≤—ã—Å—à–∏–π –∑–∞–∫–æ–Ω –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞
‚Ä¢ <b>–ü—Ä–∞–≤–∞ –∏ —Å–≤–æ–±–æ–¥—ã —á–µ–ª–æ–≤–µ–∫–∞</b> - –≤—ã—Å—à–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å (—Å—Ç. 2)
‚Ä¢ <b>–§–µ–¥–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</b> - –æ—Å–Ω–æ–≤–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
‚Ä¢ <b>–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤–ª–∞—Å—Ç–µ–π</b> - –ø—Ä–∏–Ω—Ü–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤–ª–∞—Å—Ç–∏
‚Ä¢ <b>–í–µ—Ä—Ö–æ–≤–µ–Ω—Å—Ç–≤–æ –ø—Ä–∞–≤–∞</b> - –æ—Å–Ω–æ–≤–æ–ø–æ–ª–∞–≥–∞—é—â–∏–π –ø—Ä–∏–Ω—Ü–∏–ø

<b>–í–ê–ñ–ù–´–ï –û–†–ì–ê–ù–´:</b>
‚Ä¢ <b>–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω—ã–π –°—É–¥ –†–§</b> - –æ—Ä–≥–∞–Ω –∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
‚Ä¢ <b>–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç –†–§</b> - –≥–ª–∞–≤–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞
‚Ä¢ <b>–§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–µ –°–æ–±—Ä–∞–Ω–∏–µ</b> - –ø–∞—Ä–ª–∞–º–µ–Ω—Ç –†–§
‚Ä¢ <b>–ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ –†–§</b> - –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–ª–∞—Å—Ç—å

<b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:</b>
‚Ä¢ –ò–∑—É—á–∏—Ç–µ —Ç–µ–∫—Å—Ç –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏ –†–§
‚Ä¢ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ä–µ—à–µ–Ω–∏—è–º–∏ –ö–° –†–§
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ –∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω–æ–º—É –ø—Ä–∞–≤—É

üí° <b>–î–ª—è —Ç–æ—á–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–µ–º—É —é—Ä–∏—Å—Ç—É.</b>

---

‚ùì <b>–ù–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç–∞? –í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã?</b>
üÜì <b>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</b> @ZachitaPrava02"""
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ." 
    
    def _detect_bankruptcy_context(self, query: str) -> dict:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞ –∏ –ø—Ä–∏–º–µ–Ω–∏–º—ã–µ –∑–∞–∫–æ–Ω—ã"""
        context = {
            'is_bankruptcy': False,
            'debt_amount': None,
            'applicable_laws': [],
            'procedure_type': None
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
        if not query or not isinstance(query, str) or not query.strip():
            logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ
            context['is_bankruptcy'] = False
            context['general_advice'] = "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–∞–≤–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"
            return context
        
        query_lower = query.strip().lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ
        bankruptcy_keywords = ['–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ', '–Ω–µ—Å–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–±–∞–Ω–∫—Ä–æ—Ç', '–¥–æ–ª–≥']
        if any(keyword in query_lower for keyword in bankruptcy_keywords):
            context['is_bankruptcy'] = True
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –¥–æ–ª–≥–∞
            import re
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—É–º–º
            amount_patterns = [
                r'(\d+)\s*(?:–º–ª–Ω|–º–∏–ª–ª–∏–æ–Ω)',
                r'(\d+)\s*(?:—Ç—ã—Å—è—á|—Ç—ã—Å)',
                r'(\d+)\s*(?:—Ä—É–±–ª–µ–π|—Ä—É–±)',
                r'–æ—Ç\s*(\d+)\s*–¥–æ\s*(\d+)',
                r'(\d+)\s*(?:000|–∫)',
                r'–¥–æ\s*(\d+)\s*(?:–º–ª–Ω|–º–∏–ª–ª–∏–æ–Ω)',
                r'—Å–≤—ã—à–µ\s*(\d+)',
                r'–±–æ–ª–µ–µ\s*(\d+)'
            ]
            
            for pattern in amount_patterns:
                match = re.search(pattern, query_lower)
                if match:
                    try:
                        amount = int(match.group(1))
                        if '–º–ª–Ω' in match.group(0) or '–º–∏–ª–ª–∏–æ–Ω' in match.group(0):
                            amount *= 1000000
                        elif '—Ç—ã—Å—è—á' in match.group(0) or '—Ç—ã—Å' in match.group(0):
                            amount *= 1000
                        elif '000' in match.group(0):
                            amount *= 1000
                        context['debt_amount'] = amount
                        break
                    except (ValueError, IndexError):
                        continue
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∏ –ø—Ä–∏–º–µ–Ω–∏–º—ã–µ –∑–∞–∫–æ–Ω—ã
            if context['debt_amount']:
                if context['debt_amount'] < 1000000:  # –î–æ –º–∏–ª–ª–∏–æ–Ω–∞
                    if context['debt_amount'] >= 25000:  # –û—Ç 25 —Ç—ã—Å—è—á
                        context['procedure_type'] = 'extrajudicial'
                        context['applicable_laws'] = [
                            '–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω –æ—Ç 26.10.2002 N 127-–§–ó "–û –Ω–µ—Å–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ)"',
                            '–°—Ç–∞—Ç—å—è 223.1 - –í–Ω–µ—Å—É–¥–µ–±–Ω–æ–µ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ',
                            '–°—Ç–∞—Ç—å—è 223.2 - –£—Å–ª–æ–≤–∏—è –≤–Ω–µ—Å—É–¥–µ–±–Ω–æ–≥–æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞',
                            '–°—Ç–∞—Ç—å—è 223.3 - –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –≤–Ω–µ—Å—É–¥–µ–±–Ω–æ–≥–æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞'
                        ]
                    else:
                        context['procedure_type'] = 'insufficient_amount'
                        context['applicable_laws'] = [
                            '–°—É–º–º–∞ –¥–æ–ª–≥–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞ –¥–ª—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞',
                            '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 25 000 —Ä—É–±–ª–µ–π'
                        ]
                elif context['debt_amount'] >= 500000:  # –û—Ç 500 —Ç—ã—Å—è—á
                    context['procedure_type'] = 'judicial'
                    context['applicable_laws'] = [
                        '–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω –æ—Ç 26.10.2002 N 127-–§–ó "–û –Ω–µ—Å–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ)"',
                        '–°—Ç–∞—Ç—å—è 213.3 - –£—Å–ª–æ–≤–∏—è –ø—Ä–∏–∑–Ω–∞–Ω–∏—è –±–∞–Ω–∫—Ä–æ—Ç–æ–º',
                        '–°—Ç–∞—Ç—å—è 213.4 - –ó–∞—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–∑–Ω–∞–Ω–∏–∏ –±–∞–Ω–∫—Ä–æ—Ç–æ–º',
                        '–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§'
                    ]
                else:
                    # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Å—É–º–º–∞ - –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å
                    context['procedure_type'] = 'optional'
                    context['applicable_laws'] = [
                        '–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω –æ—Ç 26.10.2002 N 127-–§–ó "–û –Ω–µ—Å–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ)"',
                        '–í–æ–∑–º–æ–∂–Ω–æ –≤–Ω–µ—Å—É–¥–µ–±–Ω–æ–µ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ (—Å—Ç–∞—Ç—å—è 223.1)',
                        '–í–æ–∑–º–æ–∂–Ω–æ —Å—É–¥–µ–±–Ω–æ–µ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ (—Å—Ç–∞—Ç—å—è 213.3)'
                    ]
        
        return context
    
    def _generate_smart_legal_references(self, query: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—å–∏ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞
            bankruptcy_context = self._detect_bankruptcy_context(query)
            
            if bankruptcy_context['is_bankruptcy'] and bankruptcy_context['applicable_laws']:
                # –î–ª—è –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
                logger.info(f"üè¶ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞: {bankruptcy_context['procedure_type']}")
                
                legal_references = "\n\nüìã <b>–ü–†–ò–ú–ï–ù–ò–ú–´–ï –°–¢–ê–¢–¨–ò –ó–ê–ö–û–ù–û–í:</b>"
                
                if bankruptcy_context['procedure_type'] == 'extrajudicial':
                    legal_references += "\n‚Ä¢ <b>–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω –æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ:</b> "
                    legal_references += "—Å—Ç. 223.1 (–í–Ω–µ—Å—É–¥–µ–±–Ω–æ–µ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ –≥—Ä–∞–∂–¥–∞–Ω), "
                    legal_references += "—Å—Ç. 223.2 (–£—Å–ª–æ–≤–∏—è –≤–Ω–µ—Å—É–¥–µ–±–Ω–æ–≥–æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞), "
                    legal_references += "—Å—Ç. 223.3 (–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –≤–Ω–µ—Å—É–¥–µ–±–Ω–æ–≥–æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞)"
                    
                    if bankruptcy_context['debt_amount']:
                        legal_references += f"\n‚Ä¢ <b>–ü—Ä–∏–º–µ–Ω–∏–º–æ –¥–ª—è —Å—É–º–º—ã:</b> {bankruptcy_context['debt_amount']:,} —Ä—É–±–ª–µ–π"
                        legal_references += "\n‚Ä¢ <b>–î–∏–∞–ø–∞–∑–æ–Ω:</b> –æ—Ç 25 000 –¥–æ 1 000 000 —Ä—É–±–ª–µ–π"
                    
                elif bankruptcy_context['procedure_type'] == 'judicial':
                    legal_references += "\n‚Ä¢ <b>–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω –æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ:</b> "
                    legal_references += "—Å—Ç. 213.3 (–£—Å–ª–æ–≤–∏—è –ø—Ä–∏–∑–Ω–∞–Ω–∏—è –±–∞–Ω–∫—Ä–æ—Ç–æ–º), "
                    legal_references += "—Å—Ç. 213.4 (–ó–∞—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–∑–Ω–∞–Ω–∏–∏ –±–∞–Ω–∫—Ä–æ—Ç–æ–º), "
                    legal_references += "—Å—Ç. 213.5 (–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è)"
                    legal_references += "\n‚Ä¢ <b>–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§:</b> "
                    legal_references += "—Å—Ç. 223 (–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –¥–µ–ª –æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ)"
                    
                    if bankruptcy_context['debt_amount']:
                        legal_references += f"\n‚Ä¢ <b>–ü—Ä–∏–º–µ–Ω–∏–º–æ –¥–ª—è —Å—É–º–º—ã:</b> {bankruptcy_context['debt_amount']:,} —Ä—É–±–ª–µ–π"
                        legal_references += "\n‚Ä¢ <b>–ú–∏–Ω–∏–º—É–º:</b> 500 000 —Ä—É–±–ª–µ–π"
                
                elif bankruptcy_context['procedure_type'] == 'insufficient_amount':
                    legal_references += "\n‚Ä¢ <b>‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï:</b> –°—É–º–º–∞ –¥–æ–ª–≥–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞ –¥–ª—è –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞"
                    legal_references += "\n‚Ä¢ <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:</b> 25 000 —Ä—É–±–ª–µ–π"
                    legal_references += "\n‚Ä¢ <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:</b> –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è"
                
                elif bankruptcy_context['procedure_type'] == 'optional':
                    legal_references += "\n‚Ä¢ <b>–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω –æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ:</b> "
                    legal_references += "—Å—Ç. 223.1 (–í–Ω–µ—Å—É–¥–µ–±–Ω–æ–µ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ - –ø—Ä–∏ –æ—Å–æ–±—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö), "
                    legal_references += "—Å—Ç. 213.3 (–°—É–¥–µ–±–Ω–æ–µ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ - –æ–±—â–∏–π –ø–æ—Ä—è–¥–æ–∫)"
                    
                    if bankruptcy_context['debt_amount']:
                        legal_references += f"\n‚Ä¢ <b>–°—É–º–º–∞ –¥–æ–ª–≥–∞:</b> {bankruptcy_context['debt_amount']:,} —Ä—É–±–ª–µ–π"
                        legal_references += "\n‚Ä¢ <b>–í–æ–∑–º–æ–∂–Ω—ã –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞:</b> –≤–Ω–µ—Å—É–¥–µ–±–Ω–æ–µ –∏ —Å—É–¥–µ–±–Ω–æ–µ"
                
                return legal_references
            
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–µ–±-–ø–æ–∏—Å–∫)
            logger.info("üåê –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–µ–±-–ø–æ–∏—Å–∫")
            return ""
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–º–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: {e}")
            return "" 
    
    async def transcribe_voice_message(self, voice_file_bytes: bytes, file_format: str = "ogg") -> str:
        """
        –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Whisper-1 API
        
        Args:
            voice_file_bytes: –ë–∞–π—Ç—ã –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
            file_format: –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ (ogg, mp3, wav –∏ —Ç.–¥.)
            
        Returns:
            str: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        try:
            logger.info("üé§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –¥–ª—è OpenAI API
            if isinstance(voice_file_bytes, bytes):
                audio_file = io.BytesIO(voice_file_bytes)
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ BytesIO –æ–±—ä–µ–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
                audio_file = voice_file_bytes
                voice_file_bytes.seek(0)
            
            audio_file.name = f"voice_message.{file_format}"
            
            logger.info(f"üìä –†–∞–∑–º–µ—Ä –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö: {len(voice_file_bytes) if isinstance(voice_file_bytes, bytes) else 'BytesIO –æ–±—ä–µ–∫—Ç'} –±–∞–π—Ç")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Whisper-1
            logger.info("üì° –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ Whisper-1 API...")
            response = self.client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file,
                language="ru"  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            )
            
            transcribed_text = response.text.strip()
            logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –¢–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π: {len(transcribed_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.info(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {transcribed_text[:100]}...")
            
            if not transcribed_text:
                logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
                return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            
            return transcribed_text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if "insufficient_quota" in str(e) or "429" in str(e):
                return "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ OpenAI API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º."
            elif "invalid_request_error" in str(e):
                return "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑."
            elif "audio" in str(e).lower():
                return "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∏."
            else:
                return "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º."
    
    async def process_voice_message(self, voice_file_bytes: bytes, file_format: str = "ogg") -> str:
        """
        –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ + –ø–æ–∏—Å–∫ –ø—Ä–∞–∫—Ç–∏–∫–∏
        
        Args:
            voice_file_bytes: –ë–∞–π—Ç—ã –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
            file_format: –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
            
        Returns:
            str: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–∏—Ç—É–∞—Ü–∏–∏
        """
        try:
            logger.info("üéØ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
            
            # –®–∞–≥ 1: –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
            transcribed_text = await self.transcribe_voice_message(voice_file_bytes, file_format)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
            if transcribed_text.startswith("‚ùå"):
                logger.error("‚ùå –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
                return transcribed_text
            
            logger.info(f"‚úÖ –†–µ—á—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: '{transcribed_text[:50]}...'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç
            if not transcribed_text or transcribed_text.strip() == "":
                logger.error("‚ùå –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—É—Å—Ç")
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑ –±–æ–ª–µ–µ —á–µ—Ç–∫–æ."
            
            # –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Ç—É–∞—Ü–∏—é —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏
            logger.info("üîç –ü–µ—Ä–µ–¥–∞—é —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –º–æ–¥—É–ª—å –ø–æ–∏—Å–∫–∞ —Å—É–¥–µ–±–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫...")
            analysis_result = await self.find_legal_practice(transcribed_text)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ –±—ã–ª–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            voice_header = f"""üé§ <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b> "{transcribed_text}"

üìã <b>–ê–ù–ê–õ–ò–ó –í–ê–®–ï–ô –°–ò–¢–£–ê–¶–ò–ò:</b>

"""
            
            final_result = voice_header + analysis_result
            
            logger.info("‚úÖ –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return final_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"