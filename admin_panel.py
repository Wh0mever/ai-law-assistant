"""
CRM + –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è Telegram-–±–æ—Ç–∞ "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —é—Ä–∏—Å—Ç"
–£–ø—Ä–æ—â—ë–Ω–Ω–∞—è CRM —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ Telegram-–±–æ—Ç–µ ‚Äî –±–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
"""

import sqlite3
import logging
import asyncio
import json
import csv
import io
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Tuple
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
import pandas as pd
from collections import defaultdict, Counter

logger = logging.getLogger(__name__)

class AdminPanel:
    """CRM + –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ Telegram"""
    
    # –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (user_id)
    ADMIN_IDS = {1914567632, 892033994}
    
    def __init__(self, db_path: str = "bot_database.db"):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    is_active BOOLEAN DEFAULT 1,
                    total_requests INTEGER DEFAULT 0
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS user_requests (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    request_type TEXT,
                    request_text TEXT,
                    response_text TEXT,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    processing_time REAL,
                    status TEXT DEFAULT 'completed',
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–±—ã—Ç–∏–π —Å–∏—Å—Ç–µ–º—ã
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS system_events (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    event_type TEXT,
                    event_data TEXT,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    user_id INTEGER
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–º–µ—Ç–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS admin_notes (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    note_text TEXT,
                    admin_id INTEGER,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            """)
            
            conn.commit()
            conn.close()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö CRM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in self.ADMIN_IDS
    
    def log_user_activity(self, user_id: int, username: str = None, first_name: str = None, last_name: str = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("""
                INSERT OR REPLACE INTO users 
                (user_id, username, first_name, last_name, last_activity, total_requests,
                 registration_date, is_active)
                VALUES (?, ?, ?, ?, ?, 
                        COALESCE((SELECT total_requests FROM users WHERE user_id = ?), 0) + 1,
                        COALESCE((SELECT registration_date FROM users WHERE user_id = ?), ?),
                        1)
            """, (user_id, username, first_name, last_name, datetime.now(), 
                  user_id, user_id, datetime.now()))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    def log_user_request(self, user_id: int, request_type: str, request_text: str, 
                        response_text: str = "", processing_time: float = 0.0):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute("""
                INSERT INTO user_requests 
                (user_id, request_type, request_text, response_text, processing_time)
                VALUES (?, ?, ?, ?, ?)
            """, (user_id, request_type, request_text, response_text, processing_time))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    def log_system_event(self, event_type: str, event_data: str, user_id: int = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute("""
                INSERT INTO system_events (event_type, event_data, user_id)
                VALUES (?, ?, ?)
            """, (event_type, event_data, user_id))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
    
    def get_admin_keyboard(self) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_analytics")],
            [InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
            [InlineKeyboardButton(text="üìù –ó–∞–ø—Ä–æ—Å—ã", callback_data="admin_requests")],
            [InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_export")],
            [InlineKeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")]
        ])
        return keyboard
    
    def get_analytics_data(self, days: int = 7) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            start_date = datetime.now() - timedelta(days=days)
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            cursor.execute("""
                SELECT COUNT(DISTINCT user_id) as active_users
                FROM user_requests 
                WHERE timestamp >= ?
            """, (start_date,))
            active_users = cursor.fetchone()[0]
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
            cursor.execute("""
                SELECT COUNT(*) as total_requests
                FROM user_requests 
                WHERE timestamp >= ?
            """, (start_date,))
            total_requests = cursor.fetchone()[0]
            
            # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º
            cursor.execute("""
                SELECT u.user_id, u.first_name, u.username, COUNT(r.id) as request_count
                FROM users u
                JOIN user_requests r ON u.user_id = r.user_id
                WHERE r.timestamp >= ?
                GROUP BY u.user_id
                ORDER BY request_count DESC
                LIMIT 1
            """, (start_date,))
            top_user = cursor.fetchone()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤
            cursor.execute("""
                SELECT request_type, COUNT(*) as count
                FROM user_requests 
                WHERE timestamp >= ?
                GROUP BY request_type
                ORDER BY count DESC
            """, (start_date,))
            request_types = cursor.fetchall()
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º
            cursor.execute("""
                SELECT DATE(timestamp) as date, COUNT(*) as requests
                FROM user_requests 
                WHERE timestamp >= ?
                GROUP BY DATE(timestamp)
                ORDER BY date
            """, (start_date,))
            daily_activity = cursor.fetchall()
            
            conn.close()
            
            return {
                'active_users': active_users,
                'total_requests': total_requests,
                'top_user': top_user,
                'request_types': request_types,
                'daily_activity': daily_activity,
                'period_days': days
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            return {}
    
    def format_analytics_message(self, analytics: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if not analytics:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"
        
        message = f"""üìä <b>–ê–ù–ê–õ–ò–¢–ò–ö–ê –ó–ê {analytics['period_days']} –î–ù–ï–ô</b>

üë• <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b> {analytics['active_users']}
üìù <b>–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:</b> {analytics['total_requests']}

üèÜ <b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>"""
        
        if analytics['top_user']:
            user_id, first_name, username, request_count = analytics['top_user']
            user_name = first_name or username or f"ID {user_id}"
            message += f"\n‚Ä¢ {user_name} - {request_count} –∑–∞–ø—Ä–æ—Å–æ–≤"
        else:
            message += "\n‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        message += "\n\nüìà <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</b>"
        for request_type, count in analytics['request_types'][:5]:
            message += f"\n‚Ä¢ {request_type}: {count}"
        
        if analytics['daily_activity']:
            message += "\n\nüìÖ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º:</b>"
            for date, requests in analytics['daily_activity'][-7:]:
                message += f"\n‚Ä¢ {date}: {requests} –∑–∞–ø—Ä–æ—Å–æ–≤"
        
        return message
    
    def get_users_list(self, page: int = 1, limit: int = 10) -> Tuple[List[Dict], int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            offset = (page - 1) * limit
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute("""
                SELECT user_id, username, first_name, last_name, 
                       registration_date, last_activity, total_requests
                FROM users 
                ORDER BY last_activity DESC
                LIMIT ? OFFSET ?
            """, (limit, offset))
            
            users = []
            for row in cursor.fetchall():
                users.append({
                    'user_id': row[0],
                    'username': row[1],
                    'first_name': row[2],
                    'last_name': row[3],
                    'registration_date': row[4],
                    'last_activity': row[5],
                    'total_requests': row[6]
                })
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute("SELECT COUNT(*) FROM users")
            total_users = cursor.fetchone()[0]
            
            conn.close()
            
            return users, total_users
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return [], 0
    
    def export_users_csv(self) -> io.StringIO:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV"""
        try:
            conn = sqlite3.connect(self.db_path)
            
            # –ó–∞–ø—Ä–æ—Å —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            query = """
                SELECT 
                    u.user_id,
                    u.username,
                    u.first_name,
                    u.last_name,
                    u.registration_date,
                    u.last_activity,
                    u.total_requests,
                    COUNT(r.id) as actual_requests,
                    AVG(r.processing_time) as avg_processing_time
                FROM users u
                LEFT JOIN user_requests r ON u.user_id = r.user_id
                GROUP BY u.user_id
                ORDER BY u.last_activity DESC
            """
            
            df = pd.read_sql_query(query, conn)
            conn.close()
            
            # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
            output = io.StringIO()
            df.to_csv(output, index=False, encoding='utf-8')
            output.seek(0)
            
            return output
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return None
    
    def export_requests_csv(self, days: int = 30) -> io.StringIO:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –≤ CSV"""
        try:
            conn = sqlite3.connect(self.db_path)
            
            start_date = datetime.now() - timedelta(days=days)
            
            query = """
                SELECT 
                    r.id,
                    r.user_id,
                    u.username,
                    u.first_name,
                    r.request_type,
                    r.request_text,
                    r.timestamp,
                    r.processing_time,
                    r.status
                FROM user_requests r
                LEFT JOIN users u ON r.user_id = u.user_id
                WHERE r.timestamp >= ?
                ORDER BY r.timestamp DESC
            """
            
            df = pd.read_sql_query(query, conn, params=(start_date,))
            conn.close()
            
            # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
            output = io.StringIO()
            df.to_csv(output, index=False, encoding='utf-8')
            output.seek(0)
            
            return output
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
            return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
admin_panel = AdminPanel() 