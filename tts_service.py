"""
TTS (Text-to-Speech) —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI TTS API (tts-1-hd-1106) –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –≥–æ–ª–æ—Å
"""

import os
import io
import tempfile
import logging
from typing import Optional, BinaryIO
from openai import OpenAI

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç pydub —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from pydub import AudioSegment
    PYDUB_AVAILABLE = True
except ImportError as e:
    PYDUB_AVAILABLE = False
    AudioSegment = None
    print(f"‚ö†Ô∏è pydub –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    print("üí° –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ TTS —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pydub")

logger = logging.getLogger(__name__)

class TTSService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ OpenAI TTS API"""
    
    def __init__(self, api_key: str):
        self.client = OpenAI(api_key=api_key)
        self.model = "tts-1-hd"  # –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å TTS
        self.voice = "alloy"     # –ì–æ–ª–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ nova, echo, fable, onyx, shimmer)
        
    async def text_to_speech(self, text: str, max_length: int = 4000) -> Optional[bytes]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (OGG —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Telegram)
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
            max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ (TTS API –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ)
            
        Returns:
            bytes: –ê—É–¥–∏–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ OGG –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
            if not text or not text.strip():
                logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è TTS")
                return None
                
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç HTML —Ç–µ–≥–æ–≤ –∏ –¥–ª–∏–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π
            clean_text = self._clean_text_for_tts(text, max_length)
            
            if len(clean_text) == 0:
                logger.warning("‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å—Ç–∞–ª –ø—É—Å—Ç—ã–º –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏")
                return None
                
            logger.info(f"üé§ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–ª–∏–Ω–∞: {len(clean_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—á—å —á–µ—Ä–µ–∑ OpenAI TTS API
            response = self.client.audio.speech.create(
                model=self.model,
                voice=self.voice,
                input=clean_text,
                speed=1.0  # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏
            )
            
            # –ü–æ–ª—É—á–∞–µ–º MP3 –¥–∞–Ω–Ω—ã–µ
            mp3_data = response.content
            logger.info(f"‚úÖ TTS API –æ—Ç–≤–µ—Ç–∏–ª, —Ä–∞–∑–º–µ—Ä MP3: {len(mp3_data)} –±–∞–π—Ç")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º MP3 –≤ OGG –¥–ª—è Telegram
            ogg_data = self._convert_mp3_to_ogg(mp3_data)
            
            if ogg_data:
                logger.info(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ OGG –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ä–∞–∑–º–µ—Ä: {len(ogg_data)} –±–∞–π—Ç")
                return ogg_data
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å MP3 –≤ OGG")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TTS: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
            if "insufficient_quota" in str(e) or "429" in str(e):
                logger.error("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ OpenAI API –¥–ª—è TTS")
            elif "invalid_request_error" in str(e):
                logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ TTS API")
            
            return None
    
    def _clean_text_for_tts(self, text: str, max_length: int) -> str:
        """
        –û—á–∏—â–∞–µ—Ç –∏ —Å–æ–∫—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è TTS API
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        
        Returns:
            str: –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        try:
            import re
            
            # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
            clean_text = re.sub(r'<[^>]+>', '', text)
            
            # –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            clean_text = re.sub(r'[üìÑüìãüîç‚öñÔ∏èüèõÔ∏èüìäüìéüìñ‚úÖ‚ùå‚ö†Ô∏èüí°üéØüîóüì•üì±üé§]', '', clean_text)
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
            clean_text = re.sub(r'\n+', ' ', clean_text)
            clean_text = re.sub(r'\s+', ' ', clean_text)
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —á–∞—Å—Ç–∏ (—Å—Å—ã–ª–∫–∏, –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ)
            lines = clean_text.split('\n')
            filtered_lines = []
            
            for line in lines:
                line = line.strip()
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏
                if any(skip in line.lower() for skip in [
                    '–∏—Å—Ç–æ—á–Ω–∏–∫:', '—Å—Å—ã–ª–∫–∞:', '—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å:', '–Ω–∞–π–¥–µ–Ω–æ:',
                    '–¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω', '–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–ø–ª—é—Å', '==='
                ]):
                    continue
                    
                if line and len(line) > 10:  # –¢–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                    filtered_lines.append(line)
            
            clean_text = ' '.join(filtered_lines)
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
            if len(clean_text) > max_length:
                # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –∫–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                truncated = clean_text[:max_length]
                last_period = truncated.rfind('.')
                last_exclamation = truncated.rfind('!')
                last_question = truncated.rfind('?')
                
                end_pos = max(last_period, last_exclamation, last_question)
                
                if end_pos > max_length // 2:  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–∞–∑—É–º–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –æ–±—Ä–µ–∑–∫–∏
                    clean_text = truncated[:end_pos + 1]
                else:
                    clean_text = truncated + "..."
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
            clean_text = clean_text.strip()
            
            logger.info(f"üßπ –¢–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω: {len(text)} ‚Üí {len(clean_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            return clean_text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ fallback
            return text[:max_length] if len(text) > max_length else text
    
    def _convert_mp3_to_ogg(self, mp3_data: bytes) -> Optional[bytes]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç MP3 –≤ OGG —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Telegram
        
        Args:
            mp3_data: MP3 –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–π—Ç–∞—Ö
            
        Returns:
            bytes: OGG –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å pydub
        if not PYDUB_AVAILABLE:
            logger.warning("‚ö†Ô∏è pydub –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º MP3 –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –µ—Å—Ç—å")
            logger.info("üí° Telegram –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å MP3, –Ω–æ OGG –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ")
            return mp3_data  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º MP3 –∫–∞–∫ fallback
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            with tempfile.NamedTemporaryFile(suffix='.mp3', delete=False) as mp3_temp:
                mp3_temp.write(mp3_data)
                mp3_temp_path = mp3_temp.name
            
            with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as ogg_temp:
                ogg_temp_path = ogg_temp.name
            
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º MP3 –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ OGG
                audio = AudioSegment.from_mp3(mp3_temp_path)
                
                # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ OGG —Ñ–æ—Ä–º–∞—Ç (Opus –∫–æ–¥–µ–∫ –¥–ª—è Telegram)
                audio.export(
                    ogg_temp_path, 
                    format="ogg",
                    codec="libopus",
                    parameters=["-ar", "48000", "-ac", "1"]  # 48kHz –º–æ–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                )
                
                # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                with open(ogg_temp_path, 'rb') as ogg_file:
                    ogg_data = ogg_file.read()
                
                logger.info(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è MP3‚ÜíOGG: {len(mp3_data)} ‚Üí {len(ogg_data)} –±–∞–π—Ç")
                return ogg_data
                
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                try:
                    os.unlink(mp3_temp_path)
                    os.unlink(ogg_temp_path)
                except Exception as cleanup_error:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {cleanup_error}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ MP3‚ÜíOGG: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ pydub –∏ ffmpeg
            if "ffmpeg" in str(e).lower():
                logger.error("‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ")
                logger.info("üí° –í–æ–∑–≤—Ä–∞—â–∞—é MP3 –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
                return mp3_data  # Fallback –∫ MP3
            elif "pydub" in str(e).lower() or "audioread" in str(e).lower():
                logger.error("‚ùå –û—à–∏–±–∫–∞ pydub. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É: pip install pydub")
                logger.info("üí° –í–æ–∑–≤—Ä–∞—â–∞—é MP3 –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏") 
                return mp3_data  # Fallback –∫ MP3
                
            logger.warning("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞—é MP3")
            return mp3_data  # Fallback –∫ MP3
    
    def set_voice(self, voice: str):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–æ–ª–æ—Å –¥–ª—è TTS
        
        Args:
            voice: –ò–º—è –≥–æ–ª–æ—Å–∞ (alloy, echo, fable, onyx, nova, shimmer)
        """
        available_voices = ["alloy", "echo", "fable", "onyx", "nova", "shimmer"]
        
        if voice in available_voices:
            self.voice = voice
            logger.info(f"üéµ –ì–æ–ª–æ—Å TTS –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {voice}")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ–ª–æ—Å: {voice}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {available_voices}")
    
    def get_voice_info(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö TTS"""
        return {
            "model": self.model,
            "voice": self.voice,
            "available_voices": ["alloy", "echo", "fable", "onyx", "nova", "shimmer"]
        } 